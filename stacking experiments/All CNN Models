{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/boostcnn/y_pred4_test.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted4.sav\n",
      "/kaggle/input/boostcnn/errors4.sav\n",
      "/kaggle/input/boostcnn/y_pred2_test.sav\n",
      "/kaggle/input/boostcnn/y_pred3_test.sav\n",
      "/kaggle/input/boostcnn/y_pred6.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_3.h5\n",
      "/kaggle/input/boostcnn/y_pred1_test.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_8.h5\n",
      "/kaggle/input/boostcnn/boosted_cnn_7.h5\n",
      "/kaggle/input/boostcnn/errors0.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_3.json\n",
      "/kaggle/input/boostcnn/errors2.sav\n",
      "/kaggle/input/boostcnn/errors6.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_9.json\n",
      "/kaggle/input/boostcnn/y_pred_boosted1.sav\n",
      "/kaggle/input/boostcnn/y_pred0.sav\n",
      "/kaggle/input/boostcnn/errors1.sav\n",
      "/kaggle/input/boostcnn/errors9.sav\n",
      "/kaggle/input/boostcnn/y_pred5.sav\n",
      "/kaggle/input/boostcnn/y_pred0_test.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_2.json\n",
      "/kaggle/input/boostcnn/y_pred_boosted0_test.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted8.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted9.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted6.sav\n",
      "/kaggle/input/boostcnn/errors3.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_2.h5\n",
      "/kaggle/input/boostcnn/y_pred_boosted0.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_7.json\n",
      "/kaggle/input/boostcnn/errors8.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_5.h5\n",
      "/kaggle/input/boostcnn/y_pred3.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted2.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_6.h5\n",
      "/kaggle/input/boostcnn/boosted_cnn_4.json\n",
      "/kaggle/input/boostcnn/y_pred7.sav\n",
      "/kaggle/input/boostcnn/y_pred7_test.sav\n",
      "/kaggle/input/boostcnn/y_pred8.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_0.h5\n",
      "/kaggle/input/boostcnn/boosted_cnn_9.h5\n",
      "/kaggle/input/boostcnn/errors5.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted3.sav\n",
      "/kaggle/input/boostcnn/y_pred8_test.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_4.h5\n",
      "/kaggle/input/boostcnn/y_pred6_test.sav\n",
      "/kaggle/input/boostcnn/y_pred9_test.sav\n",
      "/kaggle/input/boostcnn/y_pred_boosted7.sav\n",
      "/kaggle/input/boostcnn/y_pred2.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_1.h5\n",
      "/kaggle/input/boostcnn/boosted_cnn_0.json\n",
      "/kaggle/input/boostcnn/y_pred1.sav\n",
      "/kaggle/input/boostcnn/errors7.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_1.json\n",
      "/kaggle/input/boostcnn/y_pred_boosted9_test.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_8.json\n",
      "/kaggle/input/boostcnn/y_pred9.sav\n",
      "/kaggle/input/boostcnn/y_pred5_test.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_6.json\n",
      "/kaggle/input/boostcnn/y_pred4.sav\n",
      "/kaggle/input/boostcnn/boosted_cnn_5.json\n",
      "/kaggle/input/boostcnn/y_pred_boosted5.sav\n",
      "/kaggle/input/final-opcodes/all_data.csv\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_6.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_1.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_8.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_4.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_7.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_5.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_2.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_9.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_4.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_0.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_8.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_5.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_3.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_9.h5\n",
      "/kaggle/input/bagged-malware-cnn/__resultx__.html\n",
      "/kaggle/input/bagged-malware-cnn/__notebook__.ipynb\n",
      "/kaggle/input/bagged-malware-cnn/custom.css\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_3.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_1.h5\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_7.json\n",
      "/kaggle/input/bagged-malware-cnn/__results__.html\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_0.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_2.json\n",
      "/kaggle/input/bagged-malware-cnn/__output__.json\n",
      "/kaggle/input/bagged-malware-cnn/bagged_cnn_6.h5\n",
      "/kaggle/input/bagged-malware-cnn/__results___files/__results___13_0.png\n",
      "/kaggle/input/bagged-malware-cnn/__results___files/__results___13_1.png\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_4.h5\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_1.h5\n",
      "/kaggle/input/bagged-lstm/__resultx__.html\n",
      "/kaggle/input/bagged-lstm/__notebook__.ipynb\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_2.json\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_3.h5\n",
      "/kaggle/input/bagged-lstm/custom.css\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_5.json\n",
      "/kaggle/input/bagged-lstm/__results__.html\n",
      "/kaggle/input/bagged-lstm/__output__.json\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_1.json\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_3.json\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_2.h5\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_5.h5\n",
      "/kaggle/input/bagged-lstm/bagged_lstm_4.json\n",
      "/kaggle/input/bagged-lstm/__results___files/__results___12_0.png\n",
      "/kaggle/input/bagged-lstm/__results___files/__results___12_1.png\n",
      "/kaggle/input/boosted-all/errors4.sav\n",
      "/kaggle/input/boosted-all/boosted_lstm_3.json\n",
      "/kaggle/input/boosted-all/errors0.sav\n",
      "/kaggle/input/boosted-all/errors2.sav\n",
      "/kaggle/input/boosted-all/y_pred0.sav\n",
      "/kaggle/input/boosted-all/errors1.sav\n",
      "/kaggle/input/boosted-all/y_pred_0.sav\n",
      "/kaggle/input/boosted-all/errors3.sav\n",
      "/kaggle/input/boosted-all/boost_lstm_2.sav\n",
      "/kaggle/input/boosted-all/y_pred3.sav\n",
      "/kaggle/input/boosted-all/y_combined_pred_1.sav\n",
      "/kaggle/input/boosted-all/boosted_lstm_4.h5\n",
      "/kaggle/input/boosted-all/boosted_lstm_1.json\n",
      "/kaggle/input/boosted-all/boosted_lstm_0.json\n",
      "/kaggle/input/boosted-all/y_combined_pred_3.sav\n",
      "/kaggle/input/boosted-all/boosted_lstm_0.h5\n",
      "/kaggle/input/boosted-all/y_pred2.sav\n",
      "/kaggle/input/boosted-all/boosted_lstm_3.h5\n",
      "/kaggle/input/boosted-all/boosted_lstm_1.h5\n",
      "/kaggle/input/boosted-all/boosted_lstm_2.json\n",
      "/kaggle/input/boosted-all/y_pred1.sav\n",
      "/kaggle/input/boosted-all/boosted_lstm_2.h5\n",
      "/kaggle/input/boosted-all/boosted_lstm_4.json\n",
      "/kaggle/input/boosted-all/y_pred4.sav\n",
      "/kaggle/input/boosted-all/y_combined_pred_4.sav\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import keras\n",
    "import tensorflow as tf\n",
    "import sklearn.metrics as metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.datasets import make_classification\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.utils.multiclass import unique_labels\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "from sklearn.metrics import precision_score, recall_score, accuracy_score, balanced_accuracy_score, f1_score\n",
    "import os\n",
    "from collections import Counter\n",
    "from keras.models import model_from_json\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        \n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nmodels = []\\nfor i in range(10):\\n    json_filename = \\'/kaggle/input/bagged-malware-cnn/bagged_cnn_\\' + str(i) + \".json\"\\n    model_name = \"bagged_cnn\" + str(i)\\n    h5_filename = \"/kaggle/input/bagged-malware-cnn/bagged_cnn_\" + str(i) + \".h5\"\\n    \\n    json_file = open(json_filename)\\n    loaded_json = json_file.read()\\n    json_file.close()\\n    model_name = tf.keras.models.model_from_json(loaded_json)\\n    model_name.load_weights(h5_filename)\\n    print(model_name.predict(X_test))\\n    #models.append(model)\\n\\nprint(models)\\n\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "models = []\n",
    "for i in range(10):\n",
    "    json_filename = '/kaggle/input/bagged-malware-cnn/bagged_cnn_' + str(i) + \".json\"\n",
    "    model_name = \"bagged_cnn\" + str(i)\n",
    "    h5_filename = \"/kaggle/input/bagged-malware-cnn/bagged_cnn_\" + str(i) + \".h5\"\n",
    "    \n",
    "    json_file = open(json_filename)\n",
    "    loaded_json = json_file.read()\n",
    "    json_file.close()\n",
    "    model_name = tf.keras.models.model_from_json(loaded_json)\n",
    "    model_name.load_weights(h5_filename)\n",
    "    print(model_name.predict(X_test))\n",
    "    #models.append(model)\n",
    "\n",
    "print(models)\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#baggged cnn\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_0.json', 'r')\n",
    "mj0 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_0 = tf.keras.models.model_from_json(mj0)\n",
    "bagged_cnn_0.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_0.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_1.json', 'r')\n",
    "mj1 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_1 = tf.keras.models.model_from_json(mj1)\n",
    "bagged_cnn_1.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_1.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_2.json', 'r')\n",
    "mj2 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_2 = tf.keras.models.model_from_json(mj2)\n",
    "bagged_cnn_2.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_2.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_3.json', 'r')\n",
    "mj3 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_3 = tf.keras.models.model_from_json(mj3)\n",
    "bagged_cnn_3.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_3.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_4.json', 'r')\n",
    "mj4 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_4 = tf.keras.models.model_from_json(mj4)\n",
    "bagged_cnn_4.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_4.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_5.json', 'r')\n",
    "mj5 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_5 = tf.keras.models.model_from_json(mj5)\n",
    "bagged_cnn_5.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_5.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_6.json', 'r')\n",
    "mj6 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_6 = tf.keras.models.model_from_json(mj6)\n",
    "bagged_cnn_6.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_6.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_7.json', 'r')\n",
    "mj7 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_7 = tf.keras.models.model_from_json(mj7)\n",
    "bagged_cnn_7.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_7.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_8.json', 'r')\n",
    "mj8 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_8 = tf.keras.models.model_from_json(mj8)\n",
    "bagged_cnn_8.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_8.h5\")\n",
    "json_file = open('/kaggle/input/bagged-malware-cnn/bagged_cnn_9.json', 'r')\n",
    "mj9 = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_cnn_9 = tf.keras.models.model_from_json(mj9)\n",
    "bagged_cnn_9.load_weights(\"/kaggle/input/bagged-malware-cnn/bagged_cnn_9.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#bagged lstm\n",
    "json_file = open('/kaggle/input/bagged-lstm/bagged_lstm_5.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_lstm_4 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "bagged_lstm_4.load_weights(\"/kaggle/input/bagged-lstm/bagged_lstm_5.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/bagged-lstm/bagged_lstm_4.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_lstm_3 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "bagged_lstm_3.load_weights(\"/kaggle/input/bagged-lstm/bagged_lstm_4.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/bagged-lstm/bagged_lstm_3.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_lstm_2 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "bagged_lstm_2.load_weights(\"/kaggle/input/bagged-lstm/bagged_lstm_3.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/bagged-lstm/bagged_lstm_2.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_lstm_1 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "bagged_lstm_1.load_weights(\"/kaggle/input/bagged-lstm/bagged_lstm_2.h5\")\n",
    "\n",
    "json_file = open('/kaggle/input/bagged-lstm/bagged_lstm_1.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "\n",
    "bagged_lstm_0 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "bagged_lstm_0.load_weights(\"/kaggle/input/bagged-lstm/bagged_lstm_1.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#boosted lstm\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boosted-all/boosted_lstm_4.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_lstm_4 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_lstm_4.load_weights(\"/kaggle/input/boosted-all/boosted_lstm_4.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boosted-all/boosted_lstm_3.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_lstm_3 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_lstm_3.load_weights(\"/kaggle/input/boosted-all/boosted_lstm_3.h5\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boosted-all/boosted_lstm_2.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_lstm_2 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_lstm_2.load_weights(\"/kaggle/input/boosted-all/boosted_lstm_2.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boosted-all/boosted_lstm_1.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_lstm_1 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_lstm_1.load_weights(\"/kaggle/input/boosted-all/boosted_lstm_1.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boosted-all/boosted_lstm_0.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_lstm_0 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_lstm_0.load_weights(\"/kaggle/input/boosted-all/boosted_lstm_0.h5\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#boosted cnn\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_0.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_0 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_0.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_0.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_1.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_1 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_1.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_1.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_2.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_2 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_2.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_2.h5\")\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_3.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_3 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_3.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_3.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_4.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_4 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_4.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_4.h5\")\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_5.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_5 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_5.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_5.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_6.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_6 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_6.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_6.h5\")\n",
    "\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_7.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_7= tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_7.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_7.h5\")\n",
    "\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_8.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_8 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_8.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_8.h5\")\n",
    "\n",
    "json_file = open('/kaggle/input/boostcnn/boosted_cnn_9.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "boosted_cnn_9 = tf.keras.models.model_from_json(loaded_model_json)\n",
    "boosted_cnn_9.load_weights(\"/kaggle/input/boostcnn/boosted_cnn_9.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/final-opcodes/all_data.csv')\n",
    "family_count = [162, 184, 986, 332, 156, 873, 597, 553, 129, 158, 210, 532, 153, 180, 406, 346, 937, 929, 762, 837, 303]\n",
    "\n",
    "\n",
    "df = df.loc[:, df.columns != 'Total Opcodes']\n",
    "df = df.loc[:, df.columns != 'File Name']\n",
    "\n",
    "labels = np.asarray(df[['Family']].copy())\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "labels = le.fit_transform(df['Family'])\n",
    "\n",
    "for i in range(31):\n",
    "    df = df.drop(df.columns[1], axis=1)\n",
    "\n",
    "test_size = 0.2\n",
    "\n",
    "\n",
    "opcode_sequence = (df.drop(df.columns[0], axis=1))\n",
    "X_train, X_test, y_train, y_test = train_test_split(opcode_sequence, labels, test_size=test_size, random_state = 42)\n",
    "\n",
    "\n",
    "X_test = tf.reshape(X_test, (1945, 1000, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'bagged_cnn_10' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-35376cadcf3a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#only cnn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mmodels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mboosted_cnn_0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mboosted_cnn_9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbagged_cnn_2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbagged_cnn_10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m#only lstm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'bagged_cnn_10' is not defined"
     ]
    }
   ],
   "source": [
    "predictions = []\n",
    "#all bagged cnn\n",
    "#models = [bagged_cnn_0, bagged_cnn_1,bagged_cnn_2, bagged_cnn_3, bagged_cnn_4, bagged_cnn_5, bagged_cnn_6, bagged_cnn_7, bagged_cnn_8, bagged_cnn_9, bagged_cnn_10]\n",
    "\n",
    "#all bagged lstm\n",
    "#models = [bagged_lstm_0, bagged_lstm_1, bagged_lstm_2, bagged_lstm_3, bagged_lstm_4]\n",
    "\n",
    "#bagged cnn and lstm\n",
    "#models = [bagged_lstm_0, bagged_lstm_1, bagged_lstm_2, bagged_lstm_3, bagged_lstm_4,bagged_cnn_0, bagged_cnn_1,bagged_cnn_2, bagged_cnn_3, bagged_cnn_4, bagged_cnn_5, bagged_cnn_6, bagged_cnn_7, bagged_cnn_8, bagged_cnn_9 ]\n",
    "\n",
    "#all boosted lstm\n",
    "#models = [boosted_lstm_0, boosted_lstm_1, boosted_lstm_2, boosted_lstm_3, boosted_lstm_4]\n",
    "\n",
    "#all boosted cnn\n",
    "#models = [boosted_cnn_0, boosted_cnn_1, boosted_cnn_2, boosted_cnn_3, boosted_cnn_4, boosted_cnn_5, boosted_cnn_6, boosted_cnn_7, boosted_cnn_8, boosted_cnn_9]\n",
    "\n",
    "#boosted cnn and lstm\n",
    "#models = [boosted_cnn_0, boosted_cnn_1, boosted_cnn_2, boosted_cnn_3, boosted_cnn_4, boosted_cnn_5, boosted_cnn_6, boosted_cnn_7, boosted_cnn_8, boosted_cnn_9, boosted_lstm_0, boosted_lstm_1, boosted_lstm_2, boosted_lstm_3, boosted_lstm_4]\n",
    "\n",
    "#only cnn\n",
    "models = [boosted_cnn_0, boosted_cnn_1, boosted_cnn_2, boosted_cnn_3, boosted_cnn_4, boosted_cnn_5, boosted_cnn_6, boosted_cnn_7, boosted_cnn_8, boosted_cnn_9, bagged_cnn_0, bagged_cnn_1,bagged_cnn_2, bagged_cnn_3, bagged_cnn_4, bagged_cnn_5, bagged_cnn_6, bagged_cnn_7, bagged_cnn_8, bagged_cnn_9, bagged_cnn_10]\n",
    "\n",
    "#only lstm\n",
    "#models = [bagged_lstm_0, bagged_lstm_1, bagged_lstm_2, bagged_lstm_3, bagged_lstm_4, boosted_lstm_0, boosted_lstm_1, boosted_lstm_2, boosted_lstm_3, boosted_lstm_4]\n",
    "\n",
    "\n",
    "#all boosted and bagged\n",
    "#models = [bagged_lstm_0, bagged_lstm_1, bagged_lstm_2, bagged_lstm_3, bagged_lstm_4,bagged_cnn_0, bagged_cnn_1,bagged_cnn_2, bagged_cnn_3, bagged_cnn_4, bagged_cnn_5, bagged_cnn_6, bagged_cnn_7, bagged_cnn_8, bagged_cnn_9, bagged_cnn_10, boosted_cnn_0, boosted_cnn_1, boosted_cnn_2, boosted_cnn_3, boosted_cnn_4, boosted_cnn_5, boosted_cnn_6, boosted_cnn_7, boosted_cnn_8, boosted_cnn_9, boosted_lstm_0, boosted_lstm_1, boosted_lstm_2, boosted_lstm_3, boosted_lstm_4 ]\n",
    "\n",
    "\n",
    "for model in models:\n",
    "    \n",
    "    preds = model.predict(X_test)\n",
    "    preds = list(preds)\n",
    "    \n",
    "    one_model = []\n",
    "    for i in preds:\n",
    "        i = list(i)\n",
    "        p = (i.index(max(i)))\n",
    "        one_model.append(p)\n",
    "    predictions.append(one_model)\n",
    "    #print(one_model)\n",
    "    #print(\"______________________________________next model__________\")\n",
    "            \n",
    "print(predictions)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "  \n",
    "def most_frequent(List): \n",
    "    counter = 0\n",
    "    num = List[0]\n",
    "    if len(List) == 1:\n",
    "        return num\n",
    "    for i in List: \n",
    "        curr_frequency = List.count(i) \n",
    "        if(curr_frequency> counter): \n",
    "            counter = curr_frequency \n",
    "            num = i \n",
    "  \n",
    "    return num "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'models' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-7d5f3669fc57>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1945\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mj\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'models' is not defined"
     ]
    }
   ],
   "source": [
    "voting = []\n",
    "for i in range(1945):\n",
    "    arr = []\n",
    "    for j in range(len(models)):\n",
    "        arr.append(predictions[j][i])\n",
    "        if j == len(models)-1:\n",
    "            print(arr)\n",
    "            print(most_frequent(arr))\n",
    "            voting.append(most_frequent(arr))\n",
    "print((voting))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Found input variables with inconsistent numbers of samples: [1945, 0]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-c448a4461fe4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy = {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Balanced Accuracy = {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbalanced_accuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Precision = {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprecision_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoting\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'weighted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Recall = {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecall_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoting\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'weighted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"F1 = {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf1_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoting\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'weighted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m                           FutureWarning)\n\u001b[1;32m     72\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36maccuracy_score\u001b[0;34m(y_true, y_pred, normalize, sample_weight)\u001b[0m\n\u001b[1;32m    185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# Compute accuracy for each possible representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'multilabel'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindicator\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \"\"\"\n\u001b[0;32m---> 81\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    255\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         raise ValueError(\"Found input variables with inconsistent numbers of\"\n\u001b[0;32m--> 257\u001b[0;31m                          \" samples: %r\" % [int(l) for l in lengths])\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [1945, 0]"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy = {}\".format(accuracy_score(y_test, voting)))\n",
    "print(\"Balanced Accuracy = {}\".format(balanced_accuracy_score(y_test, voting)))\n",
    "print(\"Precision = {}\".format(precision_score(y_test, voting, average='weighted')))\n",
    "print(\"Recall = {}\".format(recall_score(y_test, voting, average='weighted')))\n",
    "print(\"F1 = {}\".format(f1_score(y_test, voting, average='weighted')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
