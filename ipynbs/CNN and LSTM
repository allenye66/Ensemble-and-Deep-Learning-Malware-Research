{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/final-opcodes/all_data.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import accuracy_score\n",
    "from collections import Counter\n",
    "import keras\n",
    "from keras.models import Sequential \n",
    "from keras.layers import Activation, MaxPooling1D, Dropout, Flatten, Reshape, Dense, Conv1D, LSTM,SpatialDropout1D\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>File Name</th>\n",
       "      <th>Family</th>\n",
       "      <th>Total Opcodes</th>\n",
       "      <th>mov</th>\n",
       "      <th>push</th>\n",
       "      <th>call</th>\n",
       "      <th>lea</th>\n",
       "      <th>add</th>\n",
       "      <th>jae</th>\n",
       "      <th>inc</th>\n",
       "      <th>...</th>\n",
       "      <th>Opcode: 990</th>\n",
       "      <th>Opcode: 991</th>\n",
       "      <th>Opcode: 992</th>\n",
       "      <th>Opcode: 993</th>\n",
       "      <th>Opcode: 994</th>\n",
       "      <th>Opcode: 995</th>\n",
       "      <th>Opcode: 996</th>\n",
       "      <th>Opcode: 997</th>\n",
       "      <th>Opcode: 998</th>\n",
       "      <th>Opcode: 999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VirusShare_e79905f1fa66f24eb8d66e504e1397b6.txt</td>\n",
       "      <td>ADLOAD</td>\n",
       "      <td>166279</td>\n",
       "      <td>58319</td>\n",
       "      <td>21868</td>\n",
       "      <td>16847</td>\n",
       "      <td>5987</td>\n",
       "      <td>5658</td>\n",
       "      <td>251</td>\n",
       "      <td>1871</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VirusShare_b4e93f785f5a8cb02810c069bde04fa6.txt</td>\n",
       "      <td>ADLOAD</td>\n",
       "      <td>139659</td>\n",
       "      <td>39665</td>\n",
       "      <td>16911</td>\n",
       "      <td>12296</td>\n",
       "      <td>3782</td>\n",
       "      <td>8988</td>\n",
       "      <td>336</td>\n",
       "      <td>2012</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VirusShare_4653ec9b728045591dc180c25ae7e991.txt</td>\n",
       "      <td>ADLOAD</td>\n",
       "      <td>121762</td>\n",
       "      <td>39957</td>\n",
       "      <td>14779</td>\n",
       "      <td>11504</td>\n",
       "      <td>2883</td>\n",
       "      <td>6246</td>\n",
       "      <td>202</td>\n",
       "      <td>2487</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VirusShare_3bba539e0da9bc32ebccfc1c713208fb.txt</td>\n",
       "      <td>ADLOAD</td>\n",
       "      <td>121747</td>\n",
       "      <td>39957</td>\n",
       "      <td>14778</td>\n",
       "      <td>11503</td>\n",
       "      <td>2883</td>\n",
       "      <td>6241</td>\n",
       "      <td>202</td>\n",
       "      <td>2483</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VirusShare_e8e7d4c5e1a7a25733aae0740becd46c.txt</td>\n",
       "      <td>ADLOAD</td>\n",
       "      <td>121737</td>\n",
       "      <td>39957</td>\n",
       "      <td>14778</td>\n",
       "      <td>11503</td>\n",
       "      <td>2885</td>\n",
       "      <td>6241</td>\n",
       "      <td>202</td>\n",
       "      <td>2482</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9720</th>\n",
       "      <td>VirusShare_7bf04a28f28cac5115b5428bf1cd06c5.txt</td>\n",
       "      <td>ZBOT</td>\n",
       "      <td>1041</td>\n",
       "      <td>312</td>\n",
       "      <td>104</td>\n",
       "      <td>41</td>\n",
       "      <td>43</td>\n",
       "      <td>89</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9721</th>\n",
       "      <td>VirusShare_968ff35ca9ee18a9a846b444abfbdeaa.txt</td>\n",
       "      <td>ZBOT</td>\n",
       "      <td>1042</td>\n",
       "      <td>440</td>\n",
       "      <td>131</td>\n",
       "      <td>100</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9722</th>\n",
       "      <td>VirusShare_a252c683af848856c72bef3d1ab65232.txt</td>\n",
       "      <td>ZBOT</td>\n",
       "      <td>1030</td>\n",
       "      <td>265</td>\n",
       "      <td>156</td>\n",
       "      <td>82</td>\n",
       "      <td>26</td>\n",
       "      <td>105</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9723</th>\n",
       "      <td>VirusShare_885186e0a72510f6888e8ca1780f3c5d.txt</td>\n",
       "      <td>ZBOT</td>\n",
       "      <td>1042</td>\n",
       "      <td>489</td>\n",
       "      <td>75</td>\n",
       "      <td>44</td>\n",
       "      <td>50</td>\n",
       "      <td>73</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9724</th>\n",
       "      <td>VirusShare_a7c37aa8b09cde082bc6196631614a95.txt</td>\n",
       "      <td>ZBOT</td>\n",
       "      <td>1018</td>\n",
       "      <td>62</td>\n",
       "      <td>138</td>\n",
       "      <td>29</td>\n",
       "      <td>8</td>\n",
       "      <td>616</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9725 rows × 1034 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            File Name  Family  Total Opcodes  \\\n",
       "0     VirusShare_e79905f1fa66f24eb8d66e504e1397b6.txt  ADLOAD         166279   \n",
       "1     VirusShare_b4e93f785f5a8cb02810c069bde04fa6.txt  ADLOAD         139659   \n",
       "2     VirusShare_4653ec9b728045591dc180c25ae7e991.txt  ADLOAD         121762   \n",
       "3     VirusShare_3bba539e0da9bc32ebccfc1c713208fb.txt  ADLOAD         121747   \n",
       "4     VirusShare_e8e7d4c5e1a7a25733aae0740becd46c.txt  ADLOAD         121737   \n",
       "...                                               ...     ...            ...   \n",
       "9720  VirusShare_7bf04a28f28cac5115b5428bf1cd06c5.txt    ZBOT           1041   \n",
       "9721  VirusShare_968ff35ca9ee18a9a846b444abfbdeaa.txt    ZBOT           1042   \n",
       "9722  VirusShare_a252c683af848856c72bef3d1ab65232.txt    ZBOT           1030   \n",
       "9723  VirusShare_885186e0a72510f6888e8ca1780f3c5d.txt    ZBOT           1042   \n",
       "9724  VirusShare_a7c37aa8b09cde082bc6196631614a95.txt    ZBOT           1018   \n",
       "\n",
       "        mov   push   call   lea   add  jae   inc  ...  Opcode: 990  \\\n",
       "0     58319  21868  16847  5987  5658  251  1871  ...            5   \n",
       "1     39665  16911  12296  3782  8988  336  2012  ...            5   \n",
       "2     39957  14779  11504  2883  6246  202  2487  ...            1   \n",
       "3     39957  14778  11503  2883  6241  202  2483  ...            5   \n",
       "4     39957  14778  11503  2885  6241  202  2482  ...            5   \n",
       "...     ...    ...    ...   ...   ...  ...   ...  ...          ...   \n",
       "9720    312    104     41    43    89   15    23  ...            0   \n",
       "9721    440    131    100     9    22    0    13  ...           17   \n",
       "9722    265    156     82    26   105    1     0  ...            1   \n",
       "9723    489     75     44    50    73    1     0  ...            1   \n",
       "9724     62    138     29     8   616    1     3  ...            5   \n",
       "\n",
       "      Opcode: 991  Opcode: 992  Opcode: 993  Opcode: 994  Opcode: 995  \\\n",
       "0               5            5            5            5            5   \n",
       "1               5            5            5            5            5   \n",
       "2               1            3           17            1           13   \n",
       "3               1            4            0            0            1   \n",
       "4               1            4            0            0            1   \n",
       "...           ...          ...          ...          ...          ...   \n",
       "9720            1           22            8            6            1   \n",
       "9721            1            5            5            2            1   \n",
       "9722            1           17            9           16            0   \n",
       "9723            1            1            0            1            1   \n",
       "9724            5            5            5            5            5   \n",
       "\n",
       "      Opcode: 996  Opcode: 997  Opcode: 998  Opcode: 999  \n",
       "0               5            5            5            5  \n",
       "1               5            5            5            5  \n",
       "2              13           13           13           13  \n",
       "3               3            4            1            1  \n",
       "4               3            4            1            1  \n",
       "...           ...          ...          ...          ...  \n",
       "9720            1            0           17            1  \n",
       "9721            2            3           18           15  \n",
       "9722            1            1            1            4  \n",
       "9723           22           21            5            1  \n",
       "9724            5            5            5            5  \n",
       "\n",
       "[9725 rows x 1034 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reading in the dataset as a Pandas dataframe variable\n",
    "df = pd.read_csv('/kaggle/input/final-opcodes/all_data.csv')\n",
    "df\n",
    "#this dataset has a lot of extra columns we do not need(File Name, Total Opcodes, mov, push, call...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ADLOAD' 'AGENT' 'ALLAPLE_A' 'BHO' 'BIFROSE' 'CEEINJECT' 'CYCBOT_G'\n",
      " 'FAKEREAN' 'HOTBAR' 'INJECTOR' 'ONLINEGAMES' 'RENOS' 'RIMECUD_A' 'SMALL'\n",
      " 'TOGA_RFN' 'VB' 'VBINJECT' 'VOBFUS' 'VUNDO' 'WINWEBSEC' 'ZBOT']\n"
     ]
    }
   ],
   "source": [
    "#the families we are classifying\n",
    "print(df.Family.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Opcode: 0</th>\n",
       "      <th>Opcode: 1</th>\n",
       "      <th>Opcode: 2</th>\n",
       "      <th>Opcode: 3</th>\n",
       "      <th>Opcode: 4</th>\n",
       "      <th>Opcode: 5</th>\n",
       "      <th>Opcode: 6</th>\n",
       "      <th>Opcode: 7</th>\n",
       "      <th>Opcode: 8</th>\n",
       "      <th>Opcode: 9</th>\n",
       "      <th>...</th>\n",
       "      <th>Opcode: 990</th>\n",
       "      <th>Opcode: 991</th>\n",
       "      <th>Opcode: 992</th>\n",
       "      <th>Opcode: 993</th>\n",
       "      <th>Opcode: 994</th>\n",
       "      <th>Opcode: 995</th>\n",
       "      <th>Opcode: 996</th>\n",
       "      <th>Opcode: 997</th>\n",
       "      <th>Opcode: 998</th>\n",
       "      <th>Opcode: 999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9720</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9721</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9722</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9723</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9724</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9725 rows × 1000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Opcode: 0  Opcode: 1  Opcode: 2  Opcode: 3  Opcode: 4  Opcode: 5  \\\n",
       "0             2          1          5          1          3          1   \n",
       "1             2          1          5          1          3          1   \n",
       "2             2          0          5          0          1          7   \n",
       "3             1         27          1          7          5         27   \n",
       "4             0          7          5          7          5         28   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "9720          4          4          2          2          3         16   \n",
       "9721          2          1          5          2          2          2   \n",
       "9722          2          1          9          2          2          2   \n",
       "9723          2          1          2          2          2          1   \n",
       "9724          2          1          1          9          5          2   \n",
       "\n",
       "      Opcode: 6  Opcode: 7  Opcode: 8  Opcode: 9  ...  Opcode: 990  \\\n",
       "0             1          3          1          1  ...            5   \n",
       "1             1          3          1          1  ...            5   \n",
       "2             5          7          5          7  ...            1   \n",
       "3             5         27          1         22  ...            5   \n",
       "4             0          5          5          7  ...            5   \n",
       "...         ...        ...        ...        ...  ...          ...   \n",
       "9720         17          5         11          2  ...            0   \n",
       "9721          1          3         17          2  ...           17   \n",
       "9722          2          1          1          1  ...            1   \n",
       "9723          2          1          9          2  ...            1   \n",
       "9724          2          2          2          1  ...            5   \n",
       "\n",
       "      Opcode: 991  Opcode: 992  Opcode: 993  Opcode: 994  Opcode: 995  \\\n",
       "0               5            5            5            5            5   \n",
       "1               5            5            5            5            5   \n",
       "2               1            3           17            1           13   \n",
       "3               1            4            0            0            1   \n",
       "4               1            4            0            0            1   \n",
       "...           ...          ...          ...          ...          ...   \n",
       "9720            1           22            8            6            1   \n",
       "9721            1            5            5            2            1   \n",
       "9722            1           17            9           16            0   \n",
       "9723            1            1            0            1            1   \n",
       "9724            5            5            5            5            5   \n",
       "\n",
       "      Opcode: 996  Opcode: 997  Opcode: 998  Opcode: 999  \n",
       "0               5            5            5            5  \n",
       "1               5            5            5            5  \n",
       "2              13           13           13           13  \n",
       "3               3            4            1            1  \n",
       "4               3            4            1            1  \n",
       "...           ...          ...          ...          ...  \n",
       "9720            1            0           17            1  \n",
       "9721            2            3           18           15  \n",
       "9722            1            1            1            4  \n",
       "9723           22           21            5            1  \n",
       "9724            5            5            5            5  \n",
       "\n",
       "[9725 rows x 1000 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#here we are deleting the extra unecessary columns\n",
    "df = df.loc[:, df.columns != 'Total Opcodes']\n",
    "df = df.loc[:, df.columns != 'File Name']\n",
    "\n",
    "#this is our labels for training\n",
    "labels = np.asarray(df[['Family']].copy())\n",
    "\n",
    "#encoding the labels to numbers\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "labels = le.fit_transform(labels)\n",
    "\n",
    "#removing more unecessary columns\n",
    "for i in range(31):\n",
    "    df = df.drop(df.columns[1], axis=1)\n",
    "    \n",
    "    \n",
    "#this is our training data\n",
    "opcode_sequence = (df.drop(df.columns[0], axis=1))\n",
    "opcode_sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Opcode: 0</th>\n",
       "      <th>Opcode: 1</th>\n",
       "      <th>Opcode: 2</th>\n",
       "      <th>Opcode: 3</th>\n",
       "      <th>Opcode: 4</th>\n",
       "      <th>Opcode: 5</th>\n",
       "      <th>Opcode: 6</th>\n",
       "      <th>Opcode: 7</th>\n",
       "      <th>Opcode: 8</th>\n",
       "      <th>Opcode: 9</th>\n",
       "      <th>...</th>\n",
       "      <th>Opcode: 990</th>\n",
       "      <th>Opcode: 991</th>\n",
       "      <th>Opcode: 992</th>\n",
       "      <th>Opcode: 993</th>\n",
       "      <th>Opcode: 994</th>\n",
       "      <th>Opcode: 995</th>\n",
       "      <th>Opcode: 996</th>\n",
       "      <th>Opcode: 997</th>\n",
       "      <th>Opcode: 998</th>\n",
       "      <th>Opcode: 999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9720</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9721</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9722</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9723</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9724</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9725 rows × 1000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Opcode: 0  Opcode: 1  Opcode: 2  Opcode: 3  Opcode: 4  Opcode: 5  \\\n",
       "0             2          1          5          1          3          1   \n",
       "1             2          1          5          1          3          1   \n",
       "2             2          0          5          0          1          7   \n",
       "3             1         27          1          7          5         27   \n",
       "4             0          7          5          7          5         28   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "9720          4          4          2          2          3         16   \n",
       "9721          2          1          5          2          2          2   \n",
       "9722          2          1          9          2          2          2   \n",
       "9723          2          1          2          2          2          1   \n",
       "9724          2          1          1          9          5          2   \n",
       "\n",
       "      Opcode: 6  Opcode: 7  Opcode: 8  Opcode: 9  ...  Opcode: 990  \\\n",
       "0             1          3          1          1  ...            5   \n",
       "1             1          3          1          1  ...            5   \n",
       "2             5          7          5          7  ...            1   \n",
       "3             5         27          1         22  ...            5   \n",
       "4             0          5          5          7  ...            5   \n",
       "...         ...        ...        ...        ...  ...          ...   \n",
       "9720         17          5         11          2  ...            0   \n",
       "9721          1          3         17          2  ...           17   \n",
       "9722          2          1          1          1  ...            1   \n",
       "9723          2          1          9          2  ...            1   \n",
       "9724          2          2          2          1  ...            5   \n",
       "\n",
       "      Opcode: 991  Opcode: 992  Opcode: 993  Opcode: 994  Opcode: 995  \\\n",
       "0               5            5            5            5            5   \n",
       "1               5            5            5            5            5   \n",
       "2               1            3           17            1           13   \n",
       "3               1            4            0            0            1   \n",
       "4               1            4            0            0            1   \n",
       "...           ...          ...          ...          ...          ...   \n",
       "9720            1           22            8            6            1   \n",
       "9721            1            5            5            2            1   \n",
       "9722            1           17            9           16            0   \n",
       "9723            1            1            0            1            1   \n",
       "9724            5            5            5            5            5   \n",
       "\n",
       "      Opcode: 996  Opcode: 997  Opcode: 998  Opcode: 999  \n",
       "0               5            5            5            5  \n",
       "1               5            5            5            5  \n",
       "2              13           13           13           13  \n",
       "3               3            4            1            1  \n",
       "4               3            4            1            1  \n",
       "...           ...          ...          ...          ...  \n",
       "9720            1            0           17            1  \n",
       "9721            2            3           18           15  \n",
       "9722            1            1            1            4  \n",
       "9723           22           21            5            1  \n",
       "9724            5            5            5            5  \n",
       "\n",
       "[9725 rows x 1000 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#normalizing the data\n",
    "from sklearn import preprocessing\n",
    "#normalized_X = preprocessing.normalize(opcode_sequence)\n",
    "#opcode_sequence = normalized_X\n",
    "opcode_sequence\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9725, 1000)\n"
     ]
    }
   ],
   "source": [
    "#the shape of the data right now\n",
    "print(opcode_sequence.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7780, 1000)\n",
      "(1945, 1000)\n"
     ]
    }
   ],
   "source": [
    "#the 1D CNN CONV1D input layer needs to take in a shape of a 3 by 1 array so we reshape it\n",
    "X_train, X_test, y_train, y_test = train_test_split(opcode_sequence, labels, random_state = 0, test_size = 0.2, stratify = labels)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "#opcode_sequence = tf.reshape(opcode_sequence, (9725, 1000, 1))\n",
    "X_train = tf.reshape(X_train, (7780, 1000, 1))\n",
    "X_test = tf.reshape(X_test, (1945, 1000, 1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot the accuracy and the validation accuracy\n",
    "def plot_acc(h):\n",
    "    plt.plot(h.history['accuracy'])\n",
    "    plt.plot(h.history['val_accuracy'])\n",
    "\n",
    "    plt.title('model accuracy')\n",
    "    plt.ylabel('accuracy and loss')\n",
    "    plt.xlabel('epoch')\n",
    "\n",
    "    plt.legend(['acc', 'val acc' ], loc='upper left')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot the loss and validation loss\n",
    "def plot_loss(h):\n",
    "    plt.plot(h.history['loss'])\n",
    "    plt.plot(h.history['val_loss'])\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('accuracy and loss')\n",
    "    plt.xlabel('epoch')\n",
    "\n",
    "    plt.legend(['loss', 'val loss' ], loc='upper left')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "source": [
    "We are now done preprocessing our dataset and ready to start training the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "model = Sequential()\n",
    "#the shape of the input is (9725, 1000, 1), where there are 9725 training samples and each training sample has 1k features\n",
    "model.add(Conv1D(filters= 64, kernel_size=3, activation ='relu',strides = 2, padding = 'valid', input_shape= (1000, 1))) #not sure about a good filter/kernel size\n",
    "model.add(MaxPooling1D(pool_size=2))\n",
    "model.add(Conv1D(filters= 128, kernel_size=3, activation ='relu',strides = 2, padding = 'valid'))\n",
    "model.add(MaxPooling1D(pool_size=2))\n",
    "\n",
    "#model.add(Conv1D(filters= 256, kernel_size=3, activation ='relu',strides = 2, padding = 'valid'))\n",
    "\n",
    "\n",
    "model.add(Dropout(0.9))\n",
    "model.add(MaxPooling1D(pool_size=2))\n",
    "\n",
    "\n",
    "\n",
    "#model.add(Flatten())#\n",
    "#model.add(Activation('relu'))\n",
    "model.add(Flatten())\n",
    "\n",
    "\n",
    "model.add(Dense(21)) #for 21 families\n",
    "model.add(Activation('softmax'))\n",
    "opt = keras.optimizers.Adam(learning_rate=0.001)\n",
    "model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/300\n",
      "244/244 [==============================] - 1s 6ms/step - loss: 2.9627 - accuracy: 0.1820 - val_loss: 2.4524 - val_accuracy: 0.3476\n",
      "Epoch 2/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 2.3418 - accuracy: 0.3193 - val_loss: 2.1248 - val_accuracy: 0.4653\n",
      "Epoch 3/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 2.1005 - accuracy: 0.3880 - val_loss: 1.8571 - val_accuracy: 0.5193\n",
      "Epoch 4/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.9550 - accuracy: 0.4289 - val_loss: 1.7218 - val_accuracy: 0.5763\n",
      "Epoch 5/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.8228 - accuracy: 0.4735 - val_loss: 1.6262 - val_accuracy: 0.5748\n",
      "Epoch 6/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.7500 - accuracy: 0.4922 - val_loss: 1.5352 - val_accuracy: 0.6015\n",
      "Epoch 7/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.6509 - accuracy: 0.5239 - val_loss: 1.4665 - val_accuracy: 0.6319\n",
      "Epoch 8/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.6021 - accuracy: 0.5402 - val_loss: 1.4023 - val_accuracy: 0.6396\n",
      "Epoch 9/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.5667 - accuracy: 0.5458 - val_loss: 1.3736 - val_accuracy: 0.6555\n",
      "Epoch 10/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.4997 - accuracy: 0.5630 - val_loss: 1.3050 - val_accuracy: 0.6725\n",
      "Epoch 11/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.4441 - accuracy: 0.5801 - val_loss: 1.2717 - val_accuracy: 0.6653\n",
      "Epoch 12/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.3868 - accuracy: 0.5950 - val_loss: 1.2322 - val_accuracy: 0.6838\n",
      "Epoch 13/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.3988 - accuracy: 0.5906 - val_loss: 1.2193 - val_accuracy: 0.6751\n",
      "Epoch 14/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.3462 - accuracy: 0.6049 - val_loss: 1.1691 - val_accuracy: 0.7044\n",
      "Epoch 15/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.3429 - accuracy: 0.6022 - val_loss: 1.1664 - val_accuracy: 0.7028\n",
      "Epoch 16/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2989 - accuracy: 0.6150 - val_loss: 1.1560 - val_accuracy: 0.6987\n",
      "Epoch 17/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2888 - accuracy: 0.6243 - val_loss: 1.1221 - val_accuracy: 0.7193\n",
      "Epoch 18/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2620 - accuracy: 0.6274 - val_loss: 1.1102 - val_accuracy: 0.7090\n",
      "Epoch 19/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2461 - accuracy: 0.6328 - val_loss: 1.1252 - val_accuracy: 0.7167\n",
      "Epoch 20/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2350 - accuracy: 0.6341 - val_loss: 1.0768 - val_accuracy: 0.7306\n",
      "Epoch 21/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2121 - accuracy: 0.6427 - val_loss: 1.0481 - val_accuracy: 0.7285\n",
      "Epoch 22/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.2009 - accuracy: 0.6404 - val_loss: 1.0597 - val_accuracy: 0.7311\n",
      "Epoch 23/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1726 - accuracy: 0.6560 - val_loss: 1.0348 - val_accuracy: 0.7373\n",
      "Epoch 24/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1827 - accuracy: 0.6470 - val_loss: 1.0350 - val_accuracy: 0.7347\n",
      "Epoch 25/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1423 - accuracy: 0.6558 - val_loss: 1.0056 - val_accuracy: 0.7414\n",
      "Epoch 26/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1484 - accuracy: 0.6593 - val_loss: 1.0132 - val_accuracy: 0.7465\n",
      "Epoch 27/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0956 - accuracy: 0.6739 - val_loss: 0.9988 - val_accuracy: 0.7409\n",
      "Epoch 28/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1155 - accuracy: 0.6648 - val_loss: 0.9722 - val_accuracy: 0.7476\n",
      "Epoch 29/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1130 - accuracy: 0.6684 - val_loss: 0.9880 - val_accuracy: 0.7481\n",
      "Epoch 30/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.1045 - accuracy: 0.6692 - val_loss: 0.9771 - val_accuracy: 0.7501\n",
      "Epoch 31/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0835 - accuracy: 0.6780 - val_loss: 0.9666 - val_accuracy: 0.7501\n",
      "Epoch 32/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0707 - accuracy: 0.6806 - val_loss: 0.9519 - val_accuracy: 0.7578\n",
      "Epoch 33/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0567 - accuracy: 0.6816 - val_loss: 0.9662 - val_accuracy: 0.7681\n",
      "Epoch 34/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0536 - accuracy: 0.6776 - val_loss: 0.9412 - val_accuracy: 0.7614\n",
      "Epoch 35/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0421 - accuracy: 0.6875 - val_loss: 0.9294 - val_accuracy: 0.7604\n",
      "Epoch 36/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 1.0250 - accuracy: 0.6923 - val_loss: 0.9289 - val_accuracy: 0.7640\n",
      "Epoch 37/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0398 - accuracy: 0.6865 - val_loss: 0.9318 - val_accuracy: 0.7630\n",
      "Epoch 38/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0289 - accuracy: 0.6874 - val_loss: 0.9160 - val_accuracy: 0.7681\n",
      "Epoch 39/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0167 - accuracy: 0.6970 - val_loss: 0.9008 - val_accuracy: 0.7640\n",
      "Epoch 40/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9975 - accuracy: 0.6976 - val_loss: 0.8998 - val_accuracy: 0.7733\n",
      "Epoch 41/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9976 - accuracy: 0.6994 - val_loss: 0.8923 - val_accuracy: 0.7712\n",
      "Epoch 42/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 1.0126 - accuracy: 0.6873 - val_loss: 0.9132 - val_accuracy: 0.7712\n",
      "Epoch 43/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9850 - accuracy: 0.7019 - val_loss: 0.9050 - val_accuracy: 0.7707\n",
      "Epoch 44/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9712 - accuracy: 0.7003 - val_loss: 0.8913 - val_accuracy: 0.7692\n",
      "Epoch 45/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9766 - accuracy: 0.7026 - val_loss: 0.8754 - val_accuracy: 0.7645\n",
      "Epoch 46/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9580 - accuracy: 0.7063 - val_loss: 0.8625 - val_accuracy: 0.7702\n",
      "Epoch 47/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9789 - accuracy: 0.7040 - val_loss: 0.8937 - val_accuracy: 0.7692\n",
      "Epoch 48/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9684 - accuracy: 0.7082 - val_loss: 0.8929 - val_accuracy: 0.7717\n",
      "Epoch 49/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9730 - accuracy: 0.7072 - val_loss: 0.8771 - val_accuracy: 0.7733\n",
      "Epoch 50/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9269 - accuracy: 0.7206 - val_loss: 0.8526 - val_accuracy: 0.7810\n",
      "Epoch 51/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9440 - accuracy: 0.7077 - val_loss: 0.8746 - val_accuracy: 0.7789\n",
      "Epoch 52/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9271 - accuracy: 0.7248 - val_loss: 0.8628 - val_accuracy: 0.7810\n",
      "Epoch 53/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9373 - accuracy: 0.7156 - val_loss: 0.8595 - val_accuracy: 0.7758\n",
      "Epoch 54/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9261 - accuracy: 0.7154 - val_loss: 0.8627 - val_accuracy: 0.7707\n",
      "Epoch 55/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9269 - accuracy: 0.7193 - val_loss: 0.8592 - val_accuracy: 0.7743\n",
      "Epoch 56/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9134 - accuracy: 0.7215 - val_loss: 0.8417 - val_accuracy: 0.7774\n",
      "Epoch 57/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.9077 - accuracy: 0.7212 - val_loss: 0.8475 - val_accuracy: 0.7748\n",
      "Epoch 58/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8822 - accuracy: 0.7249 - val_loss: 0.8440 - val_accuracy: 0.7810\n",
      "Epoch 59/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8845 - accuracy: 0.7312 - val_loss: 0.8407 - val_accuracy: 0.7846\n",
      "Epoch 60/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.9108 - accuracy: 0.7238 - val_loss: 0.8436 - val_accuracy: 0.7830\n",
      "Epoch 61/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8951 - accuracy: 0.7249 - val_loss: 0.8370 - val_accuracy: 0.7810\n",
      "Epoch 62/300\n",
      "244/244 [==============================] - 1s 6ms/step - loss: 0.9003 - accuracy: 0.7204 - val_loss: 0.8245 - val_accuracy: 0.7784\n",
      "Epoch 63/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8935 - accuracy: 0.7266 - val_loss: 0.8364 - val_accuracy: 0.7748\n",
      "Epoch 64/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8500 - accuracy: 0.7299 - val_loss: 0.8200 - val_accuracy: 0.7815\n",
      "Epoch 65/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8631 - accuracy: 0.7330 - val_loss: 0.8206 - val_accuracy: 0.7799\n",
      "Epoch 66/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8658 - accuracy: 0.7315 - val_loss: 0.8197 - val_accuracy: 0.7769\n",
      "Epoch 67/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8657 - accuracy: 0.7319 - val_loss: 0.8180 - val_accuracy: 0.7794\n",
      "Epoch 68/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8449 - accuracy: 0.7389 - val_loss: 0.8164 - val_accuracy: 0.7799\n",
      "Epoch 69/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8588 - accuracy: 0.7360 - val_loss: 0.8141 - val_accuracy: 0.7815\n",
      "Epoch 70/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.8629 - accuracy: 0.7359 - val_loss: 0.8287 - val_accuracy: 0.7861\n",
      "Epoch 71/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8656 - accuracy: 0.7269 - val_loss: 0.8144 - val_accuracy: 0.7882\n",
      "Epoch 72/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8599 - accuracy: 0.7330 - val_loss: 0.7998 - val_accuracy: 0.7851\n",
      "Epoch 73/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8706 - accuracy: 0.7280 - val_loss: 0.8118 - val_accuracy: 0.7841\n",
      "Epoch 74/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8500 - accuracy: 0.7355 - val_loss: 0.8107 - val_accuracy: 0.7835\n",
      "Epoch 75/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8452 - accuracy: 0.7402 - val_loss: 0.8052 - val_accuracy: 0.7923\n",
      "Epoch 76/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8294 - accuracy: 0.7449 - val_loss: 0.8236 - val_accuracy: 0.7805\n",
      "Epoch 77/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8437 - accuracy: 0.7393 - val_loss: 0.8075 - val_accuracy: 0.7815\n",
      "Epoch 78/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8349 - accuracy: 0.7473 - val_loss: 0.8166 - val_accuracy: 0.7830\n",
      "Epoch 79/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8413 - accuracy: 0.7337 - val_loss: 0.8176 - val_accuracy: 0.7794\n",
      "Epoch 80/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.8352 - accuracy: 0.7437 - val_loss: 0.8027 - val_accuracy: 0.7835\n",
      "Epoch 81/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8115 - accuracy: 0.7449 - val_loss: 0.8008 - val_accuracy: 0.7835\n",
      "Epoch 82/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8166 - accuracy: 0.7481 - val_loss: 0.8025 - val_accuracy: 0.7902\n",
      "Epoch 83/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8283 - accuracy: 0.7423 - val_loss: 0.8051 - val_accuracy: 0.7799\n",
      "Epoch 84/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8344 - accuracy: 0.7424 - val_loss: 0.8066 - val_accuracy: 0.7851\n",
      "Epoch 85/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8247 - accuracy: 0.7432 - val_loss: 0.8138 - val_accuracy: 0.7779\n",
      "Epoch 86/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8146 - accuracy: 0.7482 - val_loss: 0.7936 - val_accuracy: 0.7866\n",
      "Epoch 87/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8127 - accuracy: 0.7469 - val_loss: 0.7900 - val_accuracy: 0.7866\n",
      "Epoch 88/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8274 - accuracy: 0.7443 - val_loss: 0.7968 - val_accuracy: 0.7856\n",
      "Epoch 89/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8254 - accuracy: 0.7458 - val_loss: 0.8001 - val_accuracy: 0.7882\n",
      "Epoch 90/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8089 - accuracy: 0.7504 - val_loss: 0.7984 - val_accuracy: 0.7877\n",
      "Epoch 91/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8012 - accuracy: 0.7487 - val_loss: 0.7965 - val_accuracy: 0.7830\n",
      "Epoch 92/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7923 - accuracy: 0.7513 - val_loss: 0.7879 - val_accuracy: 0.7871\n",
      "Epoch 93/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8169 - accuracy: 0.7491 - val_loss: 0.7910 - val_accuracy: 0.7877\n",
      "Epoch 94/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8041 - accuracy: 0.7495 - val_loss: 0.7859 - val_accuracy: 0.7907\n",
      "Epoch 95/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8070 - accuracy: 0.7474 - val_loss: 0.7923 - val_accuracy: 0.7923\n",
      "Epoch 96/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7943 - accuracy: 0.7524 - val_loss: 0.7774 - val_accuracy: 0.7882\n",
      "Epoch 97/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7949 - accuracy: 0.7564 - val_loss: 0.7904 - val_accuracy: 0.7856\n",
      "Epoch 98/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7904 - accuracy: 0.7459 - val_loss: 0.7814 - val_accuracy: 0.7830\n",
      "Epoch 99/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.8004 - accuracy: 0.7501 - val_loss: 0.7815 - val_accuracy: 0.7866\n",
      "Epoch 100/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7961 - accuracy: 0.7491 - val_loss: 0.7724 - val_accuracy: 0.7851\n",
      "Epoch 101/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7596 - accuracy: 0.7636 - val_loss: 0.7701 - val_accuracy: 0.7918\n",
      "Epoch 102/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7519 - accuracy: 0.7668 - val_loss: 0.7702 - val_accuracy: 0.7897\n",
      "Epoch 103/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7773 - accuracy: 0.7590 - val_loss: 0.7771 - val_accuracy: 0.7887\n",
      "Epoch 104/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.7828 - accuracy: 0.7540 - val_loss: 0.7731 - val_accuracy: 0.7882\n",
      "Epoch 105/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7802 - accuracy: 0.7569 - val_loss: 0.7677 - val_accuracy: 0.7877\n",
      "Epoch 106/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7727 - accuracy: 0.7542 - val_loss: 0.7691 - val_accuracy: 0.7871\n",
      "Epoch 107/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7796 - accuracy: 0.7549 - val_loss: 0.7762 - val_accuracy: 0.7907\n",
      "Epoch 108/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7798 - accuracy: 0.7504 - val_loss: 0.7682 - val_accuracy: 0.7928\n",
      "Epoch 109/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7822 - accuracy: 0.7551 - val_loss: 0.7788 - val_accuracy: 0.7897\n",
      "Epoch 110/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7668 - accuracy: 0.7598 - val_loss: 0.7768 - val_accuracy: 0.7933\n",
      "Epoch 111/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7711 - accuracy: 0.7596 - val_loss: 0.7705 - val_accuracy: 0.7923\n",
      "Epoch 112/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7727 - accuracy: 0.7613 - val_loss: 0.7709 - val_accuracy: 0.7861\n",
      "Epoch 113/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7844 - accuracy: 0.7515 - val_loss: 0.7725 - val_accuracy: 0.7856\n",
      "Epoch 114/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7535 - accuracy: 0.7670 - val_loss: 0.7755 - val_accuracy: 0.7913\n",
      "Epoch 115/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7534 - accuracy: 0.7649 - val_loss: 0.7635 - val_accuracy: 0.7938\n",
      "Epoch 116/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7615 - accuracy: 0.7591 - val_loss: 0.7777 - val_accuracy: 0.7851\n",
      "Epoch 117/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7701 - accuracy: 0.7571 - val_loss: 0.7628 - val_accuracy: 0.7907\n",
      "Epoch 118/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.7680 - accuracy: 0.7603 - val_loss: 0.7605 - val_accuracy: 0.7933\n",
      "Epoch 119/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7606 - accuracy: 0.7586 - val_loss: 0.7619 - val_accuracy: 0.7892\n",
      "Epoch 120/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7658 - accuracy: 0.7584 - val_loss: 0.7632 - val_accuracy: 0.7882\n",
      "Epoch 121/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7520 - accuracy: 0.7621 - val_loss: 0.7656 - val_accuracy: 0.7907\n",
      "Epoch 122/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7670 - accuracy: 0.7596 - val_loss: 0.7620 - val_accuracy: 0.7897\n",
      "Epoch 123/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7560 - accuracy: 0.7614 - val_loss: 0.7651 - val_accuracy: 0.7923\n",
      "Epoch 124/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.7623 - accuracy: 0.7626 - val_loss: 0.7676 - val_accuracy: 0.7902\n",
      "Epoch 125/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7632 - accuracy: 0.7645 - val_loss: 0.7758 - val_accuracy: 0.7902\n",
      "Epoch 126/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.7621 - accuracy: 0.7645 - val_loss: 0.7719 - val_accuracy: 0.7913\n",
      "Epoch 127/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7529 - accuracy: 0.7572 - val_loss: 0.7573 - val_accuracy: 0.7907\n",
      "Epoch 128/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7572 - accuracy: 0.7649 - val_loss: 0.7824 - val_accuracy: 0.7877\n",
      "Epoch 129/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7560 - accuracy: 0.7613 - val_loss: 0.7653 - val_accuracy: 0.7892\n",
      "Epoch 130/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7454 - accuracy: 0.7662 - val_loss: 0.7831 - val_accuracy: 0.7892\n",
      "Epoch 131/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7442 - accuracy: 0.7726 - val_loss: 0.7692 - val_accuracy: 0.7877\n",
      "Epoch 132/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7375 - accuracy: 0.7665 - val_loss: 0.7633 - val_accuracy: 0.7938\n",
      "Epoch 133/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7421 - accuracy: 0.7693 - val_loss: 0.7661 - val_accuracy: 0.7928\n",
      "Epoch 134/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7672 - accuracy: 0.7589 - val_loss: 0.7763 - val_accuracy: 0.7923\n",
      "Epoch 135/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7324 - accuracy: 0.7647 - val_loss: 0.7646 - val_accuracy: 0.7923\n",
      "Epoch 136/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7311 - accuracy: 0.7710 - val_loss: 0.7571 - val_accuracy: 0.7887\n",
      "Epoch 137/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7341 - accuracy: 0.7674 - val_loss: 0.7528 - val_accuracy: 0.7959\n",
      "Epoch 138/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7439 - accuracy: 0.7694 - val_loss: 0.7790 - val_accuracy: 0.7841\n",
      "Epoch 139/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7236 - accuracy: 0.7779 - val_loss: 0.7732 - val_accuracy: 0.7882\n",
      "Epoch 140/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7252 - accuracy: 0.7690 - val_loss: 0.7696 - val_accuracy: 0.7907\n",
      "Epoch 141/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7362 - accuracy: 0.7693 - val_loss: 0.7671 - val_accuracy: 0.7907\n",
      "Epoch 142/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7507 - accuracy: 0.7670 - val_loss: 0.7545 - val_accuracy: 0.8036\n",
      "Epoch 143/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7394 - accuracy: 0.7641 - val_loss: 0.7671 - val_accuracy: 0.7959\n",
      "Epoch 144/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7219 - accuracy: 0.7760 - val_loss: 0.7878 - val_accuracy: 0.7902\n",
      "Epoch 145/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7386 - accuracy: 0.7698 - val_loss: 0.7632 - val_accuracy: 0.7913\n",
      "Epoch 146/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7368 - accuracy: 0.7623 - val_loss: 0.7556 - val_accuracy: 0.8036\n",
      "Epoch 147/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7164 - accuracy: 0.7746 - val_loss: 0.7542 - val_accuracy: 0.7964\n",
      "Epoch 148/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7340 - accuracy: 0.7703 - val_loss: 0.7608 - val_accuracy: 0.7974\n",
      "Epoch 149/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7200 - accuracy: 0.7746 - val_loss: 0.7537 - val_accuracy: 0.7933\n",
      "Epoch 150/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7320 - accuracy: 0.7711 - val_loss: 0.7610 - val_accuracy: 0.7902\n",
      "Epoch 151/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7186 - accuracy: 0.7753 - val_loss: 0.7531 - val_accuracy: 0.7954\n",
      "Epoch 152/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7155 - accuracy: 0.7738 - val_loss: 0.7483 - val_accuracy: 0.8010\n",
      "Epoch 153/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7331 - accuracy: 0.7719 - val_loss: 0.7561 - val_accuracy: 0.7969\n",
      "Epoch 154/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7239 - accuracy: 0.7728 - val_loss: 0.7583 - val_accuracy: 0.7964\n",
      "Epoch 155/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7308 - accuracy: 0.7675 - val_loss: 0.7505 - val_accuracy: 0.8010\n",
      "Epoch 156/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7192 - accuracy: 0.7662 - val_loss: 0.7390 - val_accuracy: 0.8036\n",
      "Epoch 157/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7093 - accuracy: 0.7776 - val_loss: 0.7517 - val_accuracy: 0.7959\n",
      "Epoch 158/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7221 - accuracy: 0.7717 - val_loss: 0.7673 - val_accuracy: 0.7985\n",
      "Epoch 159/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7253 - accuracy: 0.7754 - val_loss: 0.7673 - val_accuracy: 0.7969\n",
      "Epoch 160/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7221 - accuracy: 0.7731 - val_loss: 0.7477 - val_accuracy: 0.7949\n",
      "Epoch 161/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7177 - accuracy: 0.7731 - val_loss: 0.7544 - val_accuracy: 0.8000\n",
      "Epoch 162/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7036 - accuracy: 0.7690 - val_loss: 0.7596 - val_accuracy: 0.7933\n",
      "Epoch 163/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7059 - accuracy: 0.7790 - val_loss: 0.7649 - val_accuracy: 0.8005\n",
      "Epoch 164/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7137 - accuracy: 0.7754 - val_loss: 0.7563 - val_accuracy: 0.7964\n",
      "Epoch 165/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7261 - accuracy: 0.7710 - val_loss: 0.7401 - val_accuracy: 0.8036\n",
      "Epoch 166/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7241 - accuracy: 0.7752 - val_loss: 0.7414 - val_accuracy: 0.8046\n",
      "Epoch 167/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7013 - accuracy: 0.7799 - val_loss: 0.7451 - val_accuracy: 0.7949\n",
      "Epoch 168/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7221 - accuracy: 0.7657 - val_loss: 0.7667 - val_accuracy: 0.7933\n",
      "Epoch 169/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6948 - accuracy: 0.7758 - val_loss: 0.7519 - val_accuracy: 0.8005\n",
      "Epoch 170/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7146 - accuracy: 0.7740 - val_loss: 0.7427 - val_accuracy: 0.8015\n",
      "Epoch 171/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7198 - accuracy: 0.7690 - val_loss: 0.7574 - val_accuracy: 0.7943\n",
      "Epoch 172/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7023 - accuracy: 0.7754 - val_loss: 0.7713 - val_accuracy: 0.7979\n",
      "Epoch 173/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7172 - accuracy: 0.7722 - val_loss: 0.7585 - val_accuracy: 0.8010\n",
      "Epoch 174/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6864 - accuracy: 0.7834 - val_loss: 0.7613 - val_accuracy: 0.8031\n",
      "Epoch 175/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6899 - accuracy: 0.7807 - val_loss: 0.7389 - val_accuracy: 0.8021\n",
      "Epoch 176/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6969 - accuracy: 0.7754 - val_loss: 0.7497 - val_accuracy: 0.7974\n",
      "Epoch 177/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7174 - accuracy: 0.7713 - val_loss: 0.7536 - val_accuracy: 0.7928\n",
      "Epoch 178/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6992 - accuracy: 0.7788 - val_loss: 0.7422 - val_accuracy: 0.8051\n",
      "Epoch 179/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6993 - accuracy: 0.7788 - val_loss: 0.7450 - val_accuracy: 0.7979\n",
      "Epoch 180/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7111 - accuracy: 0.7740 - val_loss: 0.7412 - val_accuracy: 0.8015\n",
      "Epoch 181/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6803 - accuracy: 0.7839 - val_loss: 0.7556 - val_accuracy: 0.8015\n",
      "Epoch 182/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6956 - accuracy: 0.7805 - val_loss: 0.7371 - val_accuracy: 0.8015\n",
      "Epoch 183/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6939 - accuracy: 0.7835 - val_loss: 0.7424 - val_accuracy: 0.8031\n",
      "Epoch 184/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7071 - accuracy: 0.7740 - val_loss: 0.7519 - val_accuracy: 0.8051\n",
      "Epoch 185/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7046 - accuracy: 0.7756 - val_loss: 0.7608 - val_accuracy: 0.7990\n",
      "Epoch 186/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6862 - accuracy: 0.7806 - val_loss: 0.7433 - val_accuracy: 0.7985\n",
      "Epoch 187/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.7097 - accuracy: 0.7752 - val_loss: 0.7503 - val_accuracy: 0.7938\n",
      "Epoch 188/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6932 - accuracy: 0.7807 - val_loss: 0.7561 - val_accuracy: 0.7943\n",
      "Epoch 189/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6978 - accuracy: 0.7787 - val_loss: 0.7522 - val_accuracy: 0.7964\n",
      "Epoch 190/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6869 - accuracy: 0.7834 - val_loss: 0.7486 - val_accuracy: 0.7985\n",
      "Epoch 191/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7003 - accuracy: 0.7775 - val_loss: 0.7536 - val_accuracy: 0.7969\n",
      "Epoch 192/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6871 - accuracy: 0.7832 - val_loss: 0.7413 - val_accuracy: 0.7979\n",
      "Epoch 193/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7115 - accuracy: 0.7719 - val_loss: 0.7533 - val_accuracy: 0.7974\n",
      "Epoch 194/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6835 - accuracy: 0.7853 - val_loss: 0.7628 - val_accuracy: 0.7974\n",
      "Epoch 195/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6883 - accuracy: 0.7767 - val_loss: 0.7572 - val_accuracy: 0.7964\n",
      "Epoch 196/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6988 - accuracy: 0.7774 - val_loss: 0.7508 - val_accuracy: 0.7959\n",
      "Epoch 197/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6925 - accuracy: 0.7747 - val_loss: 0.7646 - val_accuracy: 0.7969\n",
      "Epoch 198/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6994 - accuracy: 0.7792 - val_loss: 0.7413 - val_accuracy: 0.8005\n",
      "Epoch 199/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6945 - accuracy: 0.7801 - val_loss: 0.7476 - val_accuracy: 0.7964\n",
      "Epoch 200/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6920 - accuracy: 0.7779 - val_loss: 0.7463 - val_accuracy: 0.8005\n",
      "Epoch 201/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.7013 - accuracy: 0.7785 - val_loss: 0.7470 - val_accuracy: 0.8026\n",
      "Epoch 202/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6912 - accuracy: 0.7785 - val_loss: 0.7582 - val_accuracy: 0.7969\n",
      "Epoch 203/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6891 - accuracy: 0.7812 - val_loss: 0.7554 - val_accuracy: 0.7995\n",
      "Epoch 204/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6913 - accuracy: 0.7785 - val_loss: 0.7412 - val_accuracy: 0.8015\n",
      "Epoch 205/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6925 - accuracy: 0.7797 - val_loss: 0.7511 - val_accuracy: 0.7949\n",
      "Epoch 206/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6952 - accuracy: 0.7778 - val_loss: 0.7549 - val_accuracy: 0.7969\n",
      "Epoch 207/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6929 - accuracy: 0.7775 - val_loss: 0.7738 - val_accuracy: 0.7974\n",
      "Epoch 208/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6766 - accuracy: 0.7819 - val_loss: 0.7436 - val_accuracy: 0.7954\n",
      "Epoch 209/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6674 - accuracy: 0.7817 - val_loss: 0.7345 - val_accuracy: 0.8036\n",
      "Epoch 210/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6782 - accuracy: 0.7824 - val_loss: 0.7472 - val_accuracy: 0.7964\n",
      "Epoch 211/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6861 - accuracy: 0.7801 - val_loss: 0.7494 - val_accuracy: 0.8000\n",
      "Epoch 212/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6866 - accuracy: 0.7841 - val_loss: 0.7416 - val_accuracy: 0.7949\n",
      "Epoch 213/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6977 - accuracy: 0.7731 - val_loss: 0.7480 - val_accuracy: 0.7985\n",
      "Epoch 214/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6910 - accuracy: 0.7787 - val_loss: 0.7371 - val_accuracy: 0.8015\n",
      "Epoch 215/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6845 - accuracy: 0.7763 - val_loss: 0.7382 - val_accuracy: 0.8041\n",
      "Epoch 216/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6758 - accuracy: 0.7874 - val_loss: 0.7535 - val_accuracy: 0.8026\n",
      "Epoch 217/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6975 - accuracy: 0.7766 - val_loss: 0.7395 - val_accuracy: 0.8031\n",
      "Epoch 218/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6657 - accuracy: 0.7905 - val_loss: 0.7567 - val_accuracy: 0.8026\n",
      "Epoch 219/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6801 - accuracy: 0.7808 - val_loss: 0.7446 - val_accuracy: 0.8010\n",
      "Epoch 220/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6683 - accuracy: 0.7847 - val_loss: 0.7451 - val_accuracy: 0.8000\n",
      "Epoch 221/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6913 - accuracy: 0.7819 - val_loss: 0.7419 - val_accuracy: 0.8041\n",
      "Epoch 222/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6831 - accuracy: 0.7846 - val_loss: 0.7328 - val_accuracy: 0.7979\n",
      "Epoch 223/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6857 - accuracy: 0.7868 - val_loss: 0.7592 - val_accuracy: 0.7995\n",
      "Epoch 224/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6741 - accuracy: 0.7793 - val_loss: 0.7517 - val_accuracy: 0.7974\n",
      "Epoch 225/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6652 - accuracy: 0.7900 - val_loss: 0.7347 - val_accuracy: 0.8026\n",
      "Epoch 226/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6668 - accuracy: 0.7875 - val_loss: 0.7743 - val_accuracy: 0.7979\n",
      "Epoch 227/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6721 - accuracy: 0.7892 - val_loss: 0.7350 - val_accuracy: 0.8057\n",
      "Epoch 228/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6899 - accuracy: 0.7731 - val_loss: 0.7372 - val_accuracy: 0.8021\n",
      "Epoch 229/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6711 - accuracy: 0.7821 - val_loss: 0.7496 - val_accuracy: 0.8015\n",
      "Epoch 230/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6882 - accuracy: 0.7806 - val_loss: 0.7449 - val_accuracy: 0.8062\n",
      "Epoch 231/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6745 - accuracy: 0.7816 - val_loss: 0.7304 - val_accuracy: 0.8041\n",
      "Epoch 232/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6645 - accuracy: 0.7859 - val_loss: 0.7494 - val_accuracy: 0.8000\n",
      "Epoch 233/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6701 - accuracy: 0.7823 - val_loss: 0.7521 - val_accuracy: 0.8021\n",
      "Epoch 234/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6756 - accuracy: 0.7869 - val_loss: 0.7396 - val_accuracy: 0.8036\n",
      "Epoch 235/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6570 - accuracy: 0.7933 - val_loss: 0.7351 - val_accuracy: 0.8093\n",
      "Epoch 236/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6750 - accuracy: 0.7844 - val_loss: 0.7306 - val_accuracy: 0.7995\n",
      "Epoch 237/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6751 - accuracy: 0.7848 - val_loss: 0.7465 - val_accuracy: 0.8041\n",
      "Epoch 238/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6593 - accuracy: 0.7889 - val_loss: 0.7490 - val_accuracy: 0.8031\n",
      "Epoch 239/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6551 - accuracy: 0.7851 - val_loss: 0.7402 - val_accuracy: 0.8000\n",
      "Epoch 240/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6748 - accuracy: 0.7811 - val_loss: 0.7394 - val_accuracy: 0.8015\n",
      "Epoch 241/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6686 - accuracy: 0.7878 - val_loss: 0.7522 - val_accuracy: 0.7995\n",
      "Epoch 242/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6562 - accuracy: 0.7882 - val_loss: 0.7370 - val_accuracy: 0.8082\n",
      "Epoch 243/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6787 - accuracy: 0.7796 - val_loss: 0.7307 - val_accuracy: 0.8026\n",
      "Epoch 244/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6631 - accuracy: 0.7875 - val_loss: 0.7424 - val_accuracy: 0.8062\n",
      "Epoch 245/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6533 - accuracy: 0.7878 - val_loss: 0.7475 - val_accuracy: 0.8031\n",
      "Epoch 246/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6716 - accuracy: 0.7864 - val_loss: 0.7472 - val_accuracy: 0.8015\n",
      "Epoch 247/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6765 - accuracy: 0.7772 - val_loss: 0.7521 - val_accuracy: 0.8026\n",
      "Epoch 248/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6709 - accuracy: 0.7844 - val_loss: 0.7588 - val_accuracy: 0.7969\n",
      "Epoch 249/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6510 - accuracy: 0.7873 - val_loss: 0.7701 - val_accuracy: 0.8010\n",
      "Epoch 250/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6693 - accuracy: 0.7884 - val_loss: 0.7376 - val_accuracy: 0.8005\n",
      "Epoch 251/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6613 - accuracy: 0.7865 - val_loss: 0.7506 - val_accuracy: 0.8062\n",
      "Epoch 252/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6708 - accuracy: 0.7893 - val_loss: 0.7346 - val_accuracy: 0.8015\n",
      "Epoch 253/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6643 - accuracy: 0.7855 - val_loss: 0.7374 - val_accuracy: 0.7969\n",
      "Epoch 254/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6482 - accuracy: 0.7910 - val_loss: 0.7495 - val_accuracy: 0.8046\n",
      "Epoch 255/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6577 - accuracy: 0.7869 - val_loss: 0.7566 - val_accuracy: 0.8021\n",
      "Epoch 256/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6728 - accuracy: 0.7913 - val_loss: 0.7448 - val_accuracy: 0.7979\n",
      "Epoch 257/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6677 - accuracy: 0.7838 - val_loss: 0.7468 - val_accuracy: 0.8031\n",
      "Epoch 258/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6659 - accuracy: 0.7787 - val_loss: 0.7393 - val_accuracy: 0.8041\n",
      "Epoch 259/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6591 - accuracy: 0.7865 - val_loss: 0.7357 - val_accuracy: 0.8036\n",
      "Epoch 260/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6531 - accuracy: 0.7900 - val_loss: 0.7594 - val_accuracy: 0.8041\n",
      "Epoch 261/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6443 - accuracy: 0.7977 - val_loss: 0.7435 - val_accuracy: 0.8046\n",
      "Epoch 262/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6546 - accuracy: 0.7913 - val_loss: 0.7519 - val_accuracy: 0.8026\n",
      "Epoch 263/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6460 - accuracy: 0.7893 - val_loss: 0.7449 - val_accuracy: 0.8046\n",
      "Epoch 264/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6742 - accuracy: 0.7814 - val_loss: 0.7502 - val_accuracy: 0.8087\n",
      "Epoch 265/300\n",
      "244/244 [==============================] - 1s 5ms/step - loss: 0.6743 - accuracy: 0.7844 - val_loss: 0.7446 - val_accuracy: 0.7995\n",
      "Epoch 266/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6738 - accuracy: 0.7846 - val_loss: 0.7583 - val_accuracy: 0.8031\n",
      "Epoch 267/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6623 - accuracy: 0.7919 - val_loss: 0.7407 - val_accuracy: 0.8021\n",
      "Epoch 268/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6607 - accuracy: 0.7837 - val_loss: 0.7533 - val_accuracy: 0.8000\n",
      "Epoch 269/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6516 - accuracy: 0.7911 - val_loss: 0.7526 - val_accuracy: 0.8062\n",
      "Epoch 270/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6615 - accuracy: 0.7905 - val_loss: 0.7569 - val_accuracy: 0.7995\n",
      "Epoch 271/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6407 - accuracy: 0.7932 - val_loss: 0.7438 - val_accuracy: 0.8051\n",
      "Epoch 272/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6707 - accuracy: 0.7879 - val_loss: 0.7571 - val_accuracy: 0.8108\n",
      "Epoch 273/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6597 - accuracy: 0.7873 - val_loss: 0.7582 - val_accuracy: 0.8067\n",
      "Epoch 274/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6660 - accuracy: 0.7837 - val_loss: 0.7604 - val_accuracy: 0.8026\n",
      "Epoch 275/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6501 - accuracy: 0.7897 - val_loss: 0.7540 - val_accuracy: 0.8062\n",
      "Epoch 276/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6571 - accuracy: 0.7861 - val_loss: 0.7662 - val_accuracy: 0.8010\n",
      "Epoch 277/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6514 - accuracy: 0.7915 - val_loss: 0.7765 - val_accuracy: 0.8036\n",
      "Epoch 278/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6479 - accuracy: 0.7886 - val_loss: 0.7429 - val_accuracy: 0.8082\n",
      "Epoch 279/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6614 - accuracy: 0.7887 - val_loss: 0.7627 - val_accuracy: 0.8031\n",
      "Epoch 280/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6651 - accuracy: 0.7879 - val_loss: 0.7454 - val_accuracy: 0.8051\n",
      "Epoch 281/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6500 - accuracy: 0.7934 - val_loss: 0.7459 - val_accuracy: 0.8067\n",
      "Epoch 282/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6526 - accuracy: 0.7875 - val_loss: 0.7540 - val_accuracy: 0.8077\n",
      "Epoch 283/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6466 - accuracy: 0.7882 - val_loss: 0.7730 - val_accuracy: 0.8000\n",
      "Epoch 284/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6629 - accuracy: 0.7812 - val_loss: 0.7660 - val_accuracy: 0.8036\n",
      "Epoch 285/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6365 - accuracy: 0.7936 - val_loss: 0.7320 - val_accuracy: 0.8000\n",
      "Epoch 286/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6384 - accuracy: 0.7951 - val_loss: 0.7705 - val_accuracy: 0.8010\n",
      "Epoch 287/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6564 - accuracy: 0.7892 - val_loss: 0.7393 - val_accuracy: 0.8072\n",
      "Epoch 288/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6550 - accuracy: 0.7925 - val_loss: 0.7576 - val_accuracy: 0.8021\n",
      "Epoch 289/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6575 - accuracy: 0.7902 - val_loss: 0.7453 - val_accuracy: 0.8026\n",
      "Epoch 290/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6542 - accuracy: 0.7918 - val_loss: 0.7583 - val_accuracy: 0.8036\n",
      "Epoch 291/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6403 - accuracy: 0.7947 - val_loss: 0.7435 - val_accuracy: 0.8067\n",
      "Epoch 292/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6531 - accuracy: 0.7883 - val_loss: 0.7567 - val_accuracy: 0.7990\n",
      "Epoch 293/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6703 - accuracy: 0.7844 - val_loss: 0.7714 - val_accuracy: 0.7979\n",
      "Epoch 294/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6527 - accuracy: 0.7923 - val_loss: 0.7475 - val_accuracy: 0.8031\n",
      "Epoch 295/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6595 - accuracy: 0.7842 - val_loss: 0.7518 - val_accuracy: 0.8015\n",
      "Epoch 296/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6451 - accuracy: 0.7918 - val_loss: 0.7652 - val_accuracy: 0.7985\n",
      "Epoch 297/300\n",
      "244/244 [==============================] - 1s 4ms/step - loss: 0.6472 - accuracy: 0.7927 - val_loss: 0.7578 - val_accuracy: 0.8010\n",
      "Epoch 298/300\n",
      "152/244 [=================>............] - ETA: 0s - loss: 0.6447 - accuracy: 0.7936"
     ]
    }
   ],
   "source": [
    "#now to train the model:\n",
    "history = model.fit(X_train,y_train, epochs = 300, validation_data = (X_test, y_test), shuffle = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the acc and loss graphs\n",
    "plot_acc(history)\n",
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "source": [
    "Below are a few more models I am experimenting with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "7780/7780 [==============================] - 209s 27ms/step - loss: 1.9605 - accuracy: 0.4035 - val_loss: 1.7346 - val_accuracy: 0.4828\n",
      "Epoch 2/25\n",
      "7780/7780 [==============================] - 206s 27ms/step - loss: 1.4183 - accuracy: 0.5567 - val_loss: 1.2506 - val_accuracy: 0.6216\n",
      "Epoch 3/25\n",
      "7780/7780 [==============================] - 203s 26ms/step - loss: 1.2042 - accuracy: 0.6315 - val_loss: 1.0756 - val_accuracy: 0.6571\n",
      "Epoch 4/25\n",
      "7780/7780 [==============================] - 205s 26ms/step - loss: 1.0895 - accuracy: 0.6625 - val_loss: 1.0213 - val_accuracy: 0.6982\n",
      "Epoch 5/25\n",
      "7780/7780 [==============================] - 209s 27ms/step - loss: 0.9652 - accuracy: 0.6985 - val_loss: 0.9499 - val_accuracy: 0.7090\n",
      "Epoch 6/25\n",
      "7780/7780 [==============================] - 208s 27ms/step - loss: 0.9875 - accuracy: 0.7008 - val_loss: 1.0639 - val_accuracy: 0.7172\n",
      "Epoch 23/25\n",
      "7099/7780 [==========================>...] - ETA: 15s - loss: 0.9616 - accuracy: 0.7133"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "#model.add(LSTM(64, dropout=0.5, recurrent_dropout=0.2, input_shape=(1000,1)))\n",
    "model.add(LSTM(128, dropout=0, recurrent_dropout=0,go_backwards=True, input_shape=(1000,1)))\n",
    "#model.add(Dropout(0.9))\n",
    "\n",
    "model.add(Dense(21,activation='softmax'))\n",
    "model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "history = model.fit(X_train,y_train, epochs = 25,batch_size=1,validation_data = (X_test, y_test), shuffle = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_acc(history)\n",
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "7780/7780 [==============================] - 474s 61ms/step - loss: 2.3163 - accuracy: 0.3042 - val_loss: 1.7366 - val_accuracy: 0.4632\n",
      "Epoch 2/25\n",
      "7780/7780 [==============================] - 465s 60ms/step - loss: 0.4549 - accuracy: 0.8531 - val_loss: 0.7093 - val_accuracy: 0.8139\n",
      "Epoch 15/25\n",
      "7780/7780 [==============================] - 467s 60ms/step - loss: 0.4230 - accuracy: 0.8640 - val_loss: 0.7188 - val_accuracy: 0.8165\n",
      "Epoch 16/25\n",
      "6163/7780 [======================>.......] - ETA: 1:27 - loss: 0.4237 - accuracy: 0.8637"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "#model.add(LSTM(64, dropout=0.5, recurrent_dropout=0.2, input_shape=(1000,1)))\n",
    "model.add(LSTM(512, dropout=0, recurrent_dropout=0,go_backwards=True, input_shape=(1000,1)))\n",
    "#model.add(Dropout(0.9))\n",
    "\n",
    "model.add(Dense(21,activation='softmax'))\n",
    "model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "history = model.fit(X_train,y_train, epochs = 25,batch_size=1,validation_data = (X_test, y_test), shuffle = True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_acc(history)\n",
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
