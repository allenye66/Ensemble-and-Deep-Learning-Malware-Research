from sklearn import datasets
import xgboost as xgb
import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import precision_score, recall_score, accuracy_score, balanced_accuracy_score, f1_score
from sklearn.model_selection import GridSearchCV
import time
start_time = time.time()


df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')




df = df.loc[:, df.columns != 'Total Opcodes']
df = df.loc[:, df.columns != 'File Name']

labels = np.asarray(df[['Family']].copy())

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
labels = le.fit_transform(labels)

for i in range(31):
    df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
X_train, X_test, y_train, y_test = train_test_split(opcode_sequence, labels, test_size=0.1, random_state=42)


D_train = xgb.DMatrix(X_train, label= y_train)
D_test = xgb.DMatrix(X_test, label=y_test)

param = { 'eta': 0.3, 'max_depth': 3,  'objective': 'multi:softprob',  'num_class': 21} 

steps = 20  



model = xgb.train(param, D_train, steps)


preds = model.predict(D_test)
best_preds = np.asarray([np.argmax(line) for line in preds])
print("Precision = {}".format(precision_score(y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(y_test, best_preds, average='macro')))
print("Accuracy = {}".format(accuracy_score(y_test, best_preds)))
print("Balanced Accuracy = {}".format(balanced_accuracy_score(y_test, best_preds)))
print("F1 = {}".format(f1_score(y_test, best_preds, average='weighted')))









'''
clf = xgb.XGBClassifier()
parameters = {
     "eta"    : [0.05 ] ,
     "max_depth"        : [ 3],
     "min_child_weight" : [ 1 ],
     "gamma"            : [ 0.1 ],
     "colsample_bytree" : [ 0.3 ]
     }

grid = GridSearchCV(clf, parameters, n_jobs=4,  scoring='accuracy', cv=3)

grid.fit(X_train, y_train)

preds = grid.predict(X_test)

print("hyper param Accuracy = {}".format(accuracy_score(y_test, preds)))

'''
print("--- %s seconds ---" % (time.time() - start_time))

