from sklearn import datasets
import xgboost as xgb
import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels


df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')

df.Family = df.Family.replace({"ADLOAD": 0})
df.Family = df.Family.replace({"AGENT": 1})
df.Family = df.Family.replace({"ALLAPLE_A": 2})
df.Family = df.Family.replace({"BHO": 3})
df.Family = df.Family.replace({"BIFROSE": 4})
df.Family = df.Family.replace({"CEEINJECT": 5})
df.Family = df.Family.replace({"CYCBOT_G": 6})
df.Family = df.Family.replace({"FAKEREAN": 7})
df.Family = df.Family.replace({"HOTBAR": 8})
df.Family = df.Family.replace({"INJECTOR": 9})

df.Family = df.Family.replace({"LOLYDA_BF": 10})
df.Family = df.Family.replace({"ONLINEGAMES": 11})
df.Family = df.Family.replace({"RENOS": 12})
df.Family = df.Family.replace({"RIMECUD_A": 13})
df.Family = df.Family.replace({"SMALL": 14})
df.Family = df.Family.replace({"STARTPAGE": 15})
df.Family = df.Family.replace({"TOGA_RFN": 16})
df.Family = df.Family.replace({"VB": 17})
df.Family = df.Family.replace({"VBINJECT": 18})
df.Family = df.Family.replace({"VOBFUS": 19})

df.Family = df.Family.replace({"VUNDO": 20})
df.Family = df.Family.replace({"WINTRIM_X": 21})
df.Family = df.Family.replace({"WINWEBSEC": 22})
df.Family = df.Family.replace({"ZBOT": 23})

#for i in df.Family:
#	print(type(i))


#print(df.head())

df = df.loc[:, df.columns != 'Total Opcodes']
df = df.loc[:, df.columns != 'File Name']

for i in range(31):
    df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
opcode_sequence = np.asarray(opcode_sequence)


labels = np.asarray(df[['Family']].copy())



X_train, X_test, Y_train, Y_test = train_test_split(opcode_sequence, labels, test_size=0.20, random_state=42)

D_train = xgb.DMatrix(X_train, label=Y_train)
D_test = xgb.DMatrix(X_test, label=Y_test)


eta = 0.001
max_depth = 6


param = {
    'eta': eta, 
    'max_depth': max_depth,  
    'objective': 'multi:softprob',  
    'num_class': 11} 


#eta = 0.3:
	##5:
	#Precision = 0.8504025214096124
	#Recall = 0.8492375448126832
	#Accuracy = 0.8513636363636363

	##6:
	#Precision = 0.8615097646878542
	#Recall = 0.8608173928912539
	#Accuracy = 0.8627272727272727

	##7:
	#Precision = 0.8516435812641614
	#Recall = 0.8504548840873647
	#Accuracy = 0.8527272727272728

	##8:
	#Precision = 0.858871872684362
	#Recall = 0.8581988425304126
	#Accuracy = 0.8604545454545455

	##10:
	#Precision = 0.8572114549811076
	#Recall = 0.8566218570737082
	#Accuracy = 0.8586363636363636

#eta = 0.5
	##6:
	#Precision = 0.8529265102711314
	#Recall = 0.8509935724700675
	#Accuracy = 0.8531818181818182

#eta = 0.25
	##6:
	#Precision = 0.853195309923954
	#Recall = 0.8517315652912022
	#Accuracy = 0.8540909090909091
#eta = 0.15
	##6:
	#Precision = 0.8507355321921051
	#Recall = 0.8489903642588021
	#Accuracy = 0.8513636363636363


steps = 20 
model = xgb.train(param, D_train, steps)
import numpy as np
from sklearn.metrics import precision_score, recall_score, accuracy_score

preds = model.predict(D_test)
best_preds = np.asarray([np.argmax(line) for line in preds])

print("eta:", eta, "max depth:", max_depth)
print("Precision = {}".format(precision_score(Y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(Y_test, best_preds, average='macro')))
print("Accuracy = {}".format(accuracy_score(Y_test, best_preds)))

'''

iris = datasets.load_iris()
X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2)
D_train = xgb.DMatrix(X_train, label=Y_train)
D_test = xgb.DMatrix(X_test, label=Y_test)
param = {
    'eta': 0.3, 
    'max_depth': 3,  
    'objective': 'multi:softprob',  
    'num_class': 3} 

steps = 20  

model = xgb.train(param, D_train, steps)
import numpy as np
from sklearn.metrics import precision_score, recall_score, accuracy_score

preds = model.predict(D_test)
best_preds = np.asarray([np.argmax(line) for line in preds])

print("Precision = {}".format(precision_score(Y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(Y_test, best_preds, average='macro')))
print("Accuracy = {}".format(accuracy_score(Y_test, best_preds)))
'''


