from sklearn import datasets
import xgboost as xgb
import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels


df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')


#ceeinject = 0, fakerean = 1, lolydabf = 2, onlinegames = 3, renos = 4, startpage = 5, vb = 6, vbinject = 7, vobfus = 8, winwebsec = 9, zbbot = 10
df.Family = df.Family.replace({"CEEINJECT": 0})
df.Family = df.Family.replace({"FAKEREAN": 1})
df.Family = df.Family.replace({"LOLYDA_BF": 2})
df.Family = df.Family.replace({"ONLINEGAMES": 3})
df.Family = df.Family.replace({"RENOS": 4})
df.Family = df.Family.replace({"STARTPAGE": 5})
df.Family = df.Family.replace({"VB": 6})
df.Family = df.Family.replace({"VBINJECT": 7})
df.Family = df.Family.replace({"VOBFUS": 8})
df.Family = df.Family.replace({"WINWEBSEC": 9})
df.Family = df.Family.replace({"ZBOT": 10})

#for i in df.Family:
#	print(type(i))


#print(df.head())

df = df.loc[:, df.columns != 'Total Opcodes']

for i in range(31):
    df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
opcode_sequence = np.asarray(opcode_sequence)


labels = np.asarray(df[['Family']].copy())



X_train, X_test, Y_train, Y_test = train_test_split(opcode_sequence, labels, test_size=0.20, random_state=42)

D_train = xgb.DMatrix(X_train, label=Y_train)
D_test = xgb.DMatrix(X_test, label=Y_test)
param = {
    'eta': 0.3, 
    'max_depth': 3,  
    'objective': 'multi:softprob',  
    'num_class': 11} 

steps = 20 
model = xgb.train(param, D_train, steps)
import numpy as np
from sklearn.metrics import precision_score, recall_score, accuracy_score

preds = model.predict(D_test)
best_preds = np.asarray([np.argmax(line) for line in preds])

print("Precision = {}".format(precision_score(Y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(Y_test, best_preds, average='macro')))
print("Accuracy = {}".format(accuracy_score(Y_test, best_preds)))

'''

iris = datasets.load_iris()
X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2)
D_train = xgb.DMatrix(X_train, label=Y_train)
D_test = xgb.DMatrix(X_test, label=Y_test)
param = {
    'eta': 0.3, 
    'max_depth': 3,  
    'objective': 'multi:softprob',  
    'num_class': 3} 

steps = 20  

model = xgb.train(param, D_train, steps)
import numpy as np
from sklearn.metrics import precision_score, recall_score, accuracy_score

preds = model.predict(D_test)
best_preds = np.asarray([np.argmax(line) for line in preds])

print("Precision = {}".format(precision_score(Y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(Y_test, best_preds, average='macro')))
print("Accuracy = {}".format(accuracy_score(Y_test, best_preds)))
'''


