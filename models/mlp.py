import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
from sklearn.svm import LinearSVC
from sklearn.metrics import precision_score, recall_score, accuracy_score, balanced_accuracy_score, f1_score
from sklearn.neural_network import MLPClassifier


df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')



df = df.loc[:, df.columns != 'Total Opcodes']
df = df.loc[:, df.columns != 'File Name']

labels = np.asarray(df[['Family']].copy())

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
labels = le.fit_transform(labels)

for i in range(31):
    df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
X_train, X_test, y_train, y_test = train_test_split(opcode_sequence, labels, test_size=0.1, random_state=42)


nnet = MLPClassifier(random_state=1,learning_rate_init = 0.001, batch_size = 32, hidden_layer_sizes=(500, 500), max_iter= 10000) 
nnet.fit(X_train, y_train)

best_preds = nnet.predict(X_test)
print("random_state=1,learning_rate_init = 0.0001, batch_size = 256, hidden_layer_sizes=(500, 500), max_iter= 1000000")
print("Accuracy = {}".format(accuracy_score(y_test, best_preds)))
print("Balanced Accuracy = {}".format(balanced_accuracy_score(y_test, best_preds)))
print("Precision = {}".format(precision_score(y_test, best_preds, average='macro')))
print("Recall = {}".format(recall_score(y_test, best_preds, average='macro')))
print("F1 = {}".format(f1_score(y_test, best_preds, average='weighted')))
'''


for i in [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]:

	nnet = MLPClassifier(hidden_layer_sizes=(i, i), max_iter= 1000) 

	nnet.fit(X_train, y_train)

	# Predict what the classes are based on the testing data
	predictions = nnet.predict(X_test)

	# Print the score on the testing data
	print(i, ":", accuracy_score(y_test, predictions)*100)
'''
#hidden layer size (i)
	#max iter = 1000
		#10 = 65.6
		#20 = 72.94
		#30 = 82.44
		#40 = 82.5
		#50 = 83.38
		#60 = 83.05
		#70 = 83.66
		#80 = 84.11
		#90 = 84.22
		#100 = 83.94
	#max iter = 10000
		#10 = 72.77
		#20 = 82.11
		#30 = 82.11
		#40 = 81.72
		#50 = 84.77
		#60 = 83.22
		#70 = 83.33
		#80 = 83.83
		#90 = 84.94
		#100 = 82.77
	#max iter = 100000
		#10 = 25.6
		#20 = 82.94
		#30 = 83.11
		#40 = 83.11
		#50 = 84.77
		#60 = 80.61
		#70 = 84.94
		#80 = 84.72
		#90 = 82.88
		#100 = 83.66
#hidden layer size (i, i)
	#max iter = 1000
		#10 = 28.76
		#20 = 37.12
		#30 = 31.33
		#40 = 36.72
		#50 = 40.55
		#60 = 38.43
		#70 = 38.89
		#80 = 41.20 
		#90 = 42.16
		#100 = 41.76
	#max iter = 10000
		#10 = 10.22
		#20 = 39.04
		#30 = 29.31
		#40 = 39.79
		#50 = 38.28
		#60 = 39.84
		#70 = 38.89
		#80 = 41.76
		#90 = 41.61
		#100 = 42.11
	#max iter = 100000
		#10 = 20.35
		#20 = 20.20
		#30 = 21.91
		#40 = 39.24
		#50 = 39.69
		#60 = 40.60
		#70 = 39.59
		#80 = 42.41
		#90 = 42.16
		#100 = 41.71
