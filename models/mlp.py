import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
from sklearn.svm import LinearSVC

from sklearn.neural_network import MLPClassifier


df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')

df.Family = df.Family.replace({"ADLOAD": 0})
df.Family = df.Family.replace({"BHO": 1})
df.Family = df.Family.replace({"CEEINJECT": 2})
df.Family = df.Family.replace({"LOLYDA_BF": 3})
df.Family = df.Family.replace({"ONLINEGAMES": 4})
df.Family = df.Family.replace({"RENOS": 5})
df.Family = df.Family.replace({"STARTPAGE": 6})
df.Family = df.Family.replace({"VBINJECT": 7})
df.Family = df.Family.replace({"VOBFUS": 8})
df.Family = df.Family.replace({"WINWEBSEC": 9})

df = df.loc[:, df.columns != 'Total Opcodes']
df = df.loc[:, df.columns != 'File Name']

for i in range(31):
	df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
opcode_sequence = np.asarray(opcode_sequence)


labels = np.asarray(df[['Family']].copy())


X_train, X_test, y_train, y_test = train_test_split(opcode_sequence, labels, test_size=0.20, random_state=42)

for i in [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]:

	nnet = MLPClassifier(hidden_layer_sizes=(i, i), max_iter= 100000)  ## How many hidden layers? How many neurons does this have?

	nnet.fit(X_train, y_train)

	# Predict what the classes are based on the testing data
	predictions = nnet.predict(X_test)

	# Print the score on the testing data
	print(i, ":", accuracy_score(y_test, predictions)*100)

#hidden layer size (i)
	#max iter = 1000
		#10 = 65.6
		#20 = 72.94
		#30 = 82.44
		#40 = 82.5
		#50 = 83.38
		#60 = 83.05
		#70 = 83.66
		#80 = 84.11
		#90 = 84.22
		#100 = 83.94
	#max iter = 10000
		#10 = 72.77
		#20 = 82.11
		#30 = 82.11
		#40 = 81.72
		#50 = 84.77
		#60 = 83.22
		#70 = 83.33
		#80 = 83.83
		#90 = 84.94
		#100 = 82.77
	#max iter = 100000
		#10 = 25.6
		#20 = 82.94
		#30 = 83.11
		#40 = 83.11
		#50 = 84.77
		#60 = 80.61
		#70 = 84.94
		#80 = 84.72
		#90 = 82.88
		#100 = 83.66
#hidden layer size (i, i)
	#max iter = 1000
		#10 = 72.83
		#20 = 82.72
		#30 = 83
		#40 = 84.05
		#50 = 84.22
		#60 = 84.99
		#70 = 84.22
		#80 = 85.66
		#90 = 81.33
		#100 = 84.11
	#max iter = 10000
		#10 = 26.83
		#20 = 82.61
		#30 = 80.77
		#40 = 83.05
		#50 = 83.55
		#60 = 84.11
		#70 = 84.33
		#80 = 83.33
		#90 = 84.27
		#100 = 85.88
	#max iter = 100000
		#10 = 38.05
		#20 = 81.77
		#30 = 81.61
		#40 = 83.55
		#50 = 84.33
		#60 = 83.61
		#70 = 84.27
		#80 = 83.72
		#90 = 84.27
		#100 = 83.94
