import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
from sklearn.svm import LinearSVC
import keras
from keras.models import Sequential
from keras.layers import Dense, Conv1D
from keras.layers import Activation, MaxPooling1D, Dropout, Flatten, Reshape
import tensorflow as tf
df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')

X = df.iloc[:, 33:]
Y = df.iloc[:, 0]
X = X/30 #Check if there are 30 different opcodes
X = np.expand_dims(X, 2)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y = le.fit_transform(Y)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 42)

print(X_train.shape)
print(X_test.shape)

print(y_train.shape)
print(y_test.shape)



cnn = tf.keras.models.Sequential()

#First Layer
cnn.add(tf.keras.layers.Conv1D(filters=6, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
cnn.add(tf.keras.layers.MaxPool1D(pool_size=3, strides=3))

#Second Layer
cnn.add(tf.keras.layers.Conv1D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool1D(pool_size=2, strides=2))

#Flattening - Not sure if needed
cnn.add(tf.keras.layers.Flatten())

#Full Connection
cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))
cnn.add(tf.keras.layers.Flatten())

#Output Layer
cnn.add(tf.keras.layers.Dense(units=24, activation='relu')) # change activation to soft-max?

# Training the CNN on the Training set and evaluating it on the Test set
cnn.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
cnn.fit(X, Y, epochs = 100, validation_split = 0.25, batch_size = 1000) 



'''



model = Sequential()
model.add(Conv1D(5, 5, input_shape=(X_train[1], 1)))
model.add(Dense(46, activation='relu'))
model.add(Dense(56, activation='relu'))
model.add(Dense(66, activation='relu'))
model.add(Dense(56, activation='relu'))
model.add(Dense(46, activation='relu'))
model.add(Dense(y_train[1], activation='relu'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5, batch_size=10)
'''