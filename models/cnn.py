import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn import model_selection
from sklearn.metrics import accuracy_score
from collections import Counter
import keras
from keras.models import Sequential
from keras.layers import Dense, Conv1D
from keras.layers import Activation, MaxPooling1D, Dropout, Flatten, Reshape
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
import numpy as np
import pandas as pd
import seaborn as sns
import os
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

df = pd.read_csv('/Users/allen/Desktop/Malware-Research/csv/all_data.csv')

df = df.loc[:, df.columns != 'Total Opcodes']
df = df.loc[:, df.columns != 'File Name']

labels = np.asarray(df[['Family']].copy())

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
labels = le.fit_transform(labels)

for i in range(31):
    df = df.drop(df.columns[1], axis=1)



opcode_sequence = (df.drop(df.columns[0], axis=1))
from sklearn import preprocessing
normalized_X = preprocessing.normalize(opcode_sequence)
opcode_sequence = normalized_X
opcode_sequence = tf.reshape(opcode_sequence, (9725, 1000, 1))

model = Sequential()
model.add(Conv1D(filters= 32, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
model.add(MaxPooling1D(pool_size=(2)))

model.add(Conv1D(filters= 64, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
model.add(MaxPooling1D(pool_size=(2)))

model.add(Conv1D(filters= 128, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
model.add(MaxPooling1D(pool_size=(2)))

model.add(Conv1D(filters= 256, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
model.add(MaxPooling1D(pool_size=(2)))

model.add(Conv1D(filters= 512, kernel_size=3, activation ='relu', input_shape= (1000, 1)))
model.add(MaxPooling1D(pool_size=(2)))
model.add(Flatten())
model.add(Dense(512))


model.add(Activation('relu'))


model.add(Dense(21))
model.add(Activation('softmax'))

from keras.optimizers import SGD
opt = keras.optimizers.Adam(learning_rate=0.001)

model.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['accuracy'])


history = model.fit(opcode_sequence, labels, epochs = 30, validation_split = 0.1, batch_size = 256, shuffle = True)



plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('model accuracy')
plt.ylabel('accuracy and loss')
plt.xlabel('epoch')

plt.legend(['acc', 'val acc' ], loc='upper left')
plt.show()


'''
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('accuracy and loss')
plt.xlabel('epoch')

plt.legend(['loss', 'val loss' ], loc='upper left')
plt.show()
'''